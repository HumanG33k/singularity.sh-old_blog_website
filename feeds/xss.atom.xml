<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Higher Bytes by bt3</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/xss.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2014-10-31T06:30:00-04:00</updated><entry><title>A List with Common Web Vulnerabilities</title><link href="http://bt3gl.github.io/a-list-with-common-web-vulnerabilities.html" rel="alternate"></link><updated>2014-10-31T06:30:00-04:00</updated><author><name>bt3</name></author><id>tag:bt3gl.github.io,2014-10-31:a-list-with-common-web-vulnerabilities.html</id><summary type="html">&lt;p&gt;Although nomenclatures don't help  much when you facing a security problem, I am keeping this list here for some useful organization. It is constantly been updated.&lt;/p&gt;
&lt;h2&gt;Vulnerabilities to Web Applications&lt;/h2&gt;
&lt;h3&gt;Cross-site Scripting (XSS)&lt;/h3&gt;
&lt;p&gt;HTML has five characters that are reserved: angle brackets, single and double quotes, and ampersand. The ampersand should never appear in most HTML sections. Both angle brackets shouldn't be used inside a tag, unless  properly quoted. Quote characters inside a tag can also be harmless in text. To allow these characters to appear in problematic locations, an encoding based in an ampersand-prefixed and a semicolon-terminated scheme is used: the &lt;a href="http://www.w3schools.com/html/html_entities.asp"&gt;Entity Encoding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;XSS is caused by  insufficient input validation or output escaping. This can allow an attacker to insert HTML markup or scripts in a vulnerable website. The injected  code will have plenty of access in this site, and in many cases, to the HTTP cookies stored by the client.&lt;/p&gt;
&lt;h4&gt;Example of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;em&gt;password managers&lt;/em&gt;, there is a risk of  amplification of XSS bugs. In the web applications that use &lt;em&gt;&lt;a href="https://www.owasp.org/index.php/HttpOnly"&gt;httponly&lt;/a&gt;&lt;/em&gt; cookies, a successful exploitation of an XSS flaw may give the attacker a transient access to the user's account (and password).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;XSS filtering:  implementations that compare portions of the current URL with any string appearing on the retrieved page or passed to APIs such as &lt;em&gt;&lt;a href="http://www.w3schools.com/jsref/met_doc_write.asp"&gt;document.write()&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="http://www.w3schools.com/jsref/prop_html_innerhtml.asp"&gt;innerHTML&lt;/a&gt;&lt;/em&gt;. If the comparison reveals a portion of JavaScript that may have originated with improperly escaped URL, the portion is substituted by a harmless string. However, the filter may also append  legitimate portion of the page as a non-functional parameter in the URL. In some cases, this can create XSS vectors! One should not rely on this mechanism.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cross Script Inclusion (XSSI)&lt;/h3&gt;
&lt;p&gt;JSON is a JavaScript syntax structure  to keep in-place object serialization.  The curly bracket &lt;strong&gt;{&lt;/strong&gt; is assumed to be the beginning of the object. Overloading curly  brackets means that JSON blocks will not be recognized properly in standalone statements.&lt;/p&gt;
&lt;p&gt;XSSI comes with the failure to secure sensitive JSON-like responses against being loaded on third-party sites via &lt;code&gt;&amp;lt;script src=..&amp;gt;&lt;/code&gt;, and leaking user-specific information in the response. It a risk whenever ambient authority credentials (such as cookies) are used by the server to generate user-specific JavaScript code.&lt;/p&gt;
&lt;h3&gt;Cross-site Request Forgery (CSRF, XSRF)&lt;/h3&gt;
&lt;p&gt;On cross-domain navigation, the browser includes any ambient credentials. To the server, a request originating from its own client-side code will appear as the same as the request from a rogue third-party site and  it might be granted the same privilege.&lt;/p&gt;
&lt;p&gt;CSRF is the failure to verify that a particular state-changing HTTP request received by the &lt;strong&gt;server-side&lt;/strong&gt; portion of the application was initiated from the expected &lt;strong&gt;client-side&lt;/strong&gt; origin. Any third-party website loaded in the browser can perform actions in behalf of the victim.&lt;/p&gt;
&lt;h4&gt;Examples of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Any two windows of frames opened in a browser will remain &lt;a href="http://en.wikipedia.org/wiki/Same-origin_policy"&gt;same-origin&lt;/a&gt; with each other even if the user logs out from one account and permitting third-party to submit password and username and log int an attacked account. For example, the attacker can open and keep a frame pointing to a sensitive page and then log the victim into the attacker-controlled account to execute some code injection. Despite the change of  HTTP credentials the code injected will access the previous loaded frame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In several home network routers, CSRF can permit attackers to access the device and intercept or modify the network traffic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Including a secret user- and session- specific value on the requests (as an additional query parameter or a hidden field). The attacker will not be able to read the value since access to cross-domain documents is restricted by the &lt;strong&gt;same-origin&lt;/strong&gt; policy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Header Injection (Response Splitting)&lt;/h3&gt;
&lt;p&gt;Insufficient escaping of newlines in HTTP responses, generated by the server-side. This can lead to XSS or proxy cache poisoning.&lt;/p&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LF and CR characters must be stripped from any attacker-controlled values in the HTTP headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mixed Content&lt;/h3&gt;
&lt;p&gt;Loading non-HTTPS sub-resources on HTTPS pages undoes most of the benefits of encryption. For scripts and applets, this makes the application vulnerable to active attackers, specially in open wireless networks.&lt;/p&gt;
&lt;h3&gt;Open Redirection&lt;/h3&gt;
&lt;p&gt;Applications that perform HTTP- or script-based requests to user-supplied URLs without constraining the possible destinations in any meaningful way, leading, for example, to XSS.&lt;/p&gt;
&lt;h3&gt;Referer Leakage&lt;/h3&gt;
&lt;p&gt;HTTP requests may include a &lt;em&gt;Referer&lt;/em&gt; header that contains the URL of documents that triggered the current navigation in some way. The header also may reveal some information about the user browsing habits, such as query parameters in the referring page.&lt;/p&gt;
&lt;p&gt;This vulnerability is created by disclosure of a sensitive URL by embedding an off-site sub-resource of providing an off-site link. Any security data encoded in the URL of the parent document will be leaked in the &lt;em&gt;Referer&lt;/em&gt; header.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Vulnerabilities to Web Application Design&lt;/h2&gt;
&lt;h3&gt;Cache Poising&lt;/h3&gt;
&lt;p&gt;Long-term pollution of the browser cache (or any proxy within) with a malicious version of the targeted web application. Encrypted web applications may be targeted due to response-splitting vulnerabilities. In non-encrypted traffic, network attackers may be able to modify responses too.&lt;/p&gt;
&lt;h3&gt;Clickjacking&lt;/h3&gt;
&lt;p&gt;The act of obscuring a portion of a web application so that the victim is not aware that individual clicks are delivered to other site.&lt;/p&gt;
&lt;h3&gt;Content and Character Set Sniffing&lt;/h3&gt;
&lt;p&gt;Possibility that the browser will ignore any authoritative content type of character set information provided by the server and interpret the returned document incorrectly.&lt;/p&gt;
&lt;h4&gt;Examples of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Scenarios where &lt;a href="http://www.w3.org/Protocols/rfc1341/4_Content-Type.html"&gt;Content-Type&lt;/a&gt; is ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cookie Forcing/Injection&lt;/h3&gt;
&lt;p&gt;Possibility of blindly injecting HTTP cookies into the context of an otherwise impenetrable web application due to issues in how the mechanism is designed and implemented in  browsers. There are special concern to HTTPS applications.&lt;/p&gt;
&lt;h4&gt;Examples of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cookie stuffing: deleting cookies belonging to another applications by overflowing the cookie jar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Denial-of-Service (DoS)&lt;/h3&gt;
&lt;p&gt;Any opportunity of the attacker to bring down a browser or server, or make the use of a targeted application  more difficult.&lt;/p&gt;
&lt;h3&gt;Framebusting&lt;/h3&gt;
&lt;p&gt;The possibility of a framed page navigating the top-level document to a new URL without having to satisfy &lt;strong&gt;same-origin&lt;/strong&gt; checks. It might be exploited for phishing.&lt;/p&gt;
&lt;h3&gt;HTTP Downgrade&lt;/h3&gt;
&lt;p&gt;Ability of an attacker to prevent the user from reaching an HTTPS version of a site or to downgrade an existing HTTPS session to HTTP.&lt;/p&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;Strict transport security&lt;/a&gt;:  The approach allows any site to instruct the browser that all future requests made to a particular hostname or domain should always use HTTPS and that any HTTP traffic should be automatically upgraded and submitted over  HTTPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Network Fenceposts&lt;/h3&gt;
&lt;p&gt;When websites let the browser to interact with destinations not directly accessible to the attacker, for example, with the systems on a victim's internal networks. This attack can be performed with help of &lt;a href="http://en.wikipedia.org/wiki/DNS_rebinding"&gt;DNS rebinding&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Internet Explorer implements the zone model, a potential approach to the risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Vulnerabilities in the Server-Side&lt;/h2&gt;
&lt;h3&gt;Buffer Overflow&lt;/h3&gt;
&lt;p&gt;In low-level languages such as C or C++, buffer overflow happens when a program allows more information to be stored in a particular memory region than there is space to accommodate the incoming data, leading to the unexpected overwrite of other vital data structures.&lt;/p&gt;
&lt;h3&gt;Command Injection (SQL, PHP, Shellcode)&lt;/h3&gt;
&lt;p&gt;Due to insufficient input filtering or output escaping, an attacker-controlled strings may be processed as statements in an interpreted language used by the application.&lt;/p&gt;
&lt;h3&gt;Directory Traversal&lt;/h3&gt;
&lt;p&gt;Due to insufficient filtering (such as the failure to recognize &lt;code&gt;../&lt;/code&gt; segments) an application can be tricked into reading or writing files at arbitrary locations. Unconstrained file-writing bugs can be exploitable to run attacker-supplied code.&lt;/p&gt;
&lt;h3&gt;File Inclusion&lt;/h3&gt;
&lt;p&gt;If used without a qualifier or prefixed with a &lt;em&gt;local&lt;/em&gt; (LFI), the term is synonymous to read-related directory traversal. Remote file inclusion (RFI) is an alternative way to exploit file-inclusion vulnerabilities by specifying a URL rather than a valid file path. In some languages, a common API opens local files and fetches remote URLS, which might supplies the ability of retrieving attacker's files.&lt;/p&gt;
&lt;h3&gt;Format String Vulnerability&lt;/h3&gt;
&lt;p&gt;Several libraries accept templates (format strings) followed by a set of parameters that the function is expected to insert into the template at predefined locations. For example,  C has functions such as &lt;em&gt;printf&lt;/em&gt;, &lt;em&gt;syslog&lt;/em&gt;, etc. The vulnerability is caused by permitting attackers to supply the template to one of these functions. This can lead to  data leaks and code execution.&lt;/p&gt;
&lt;h3&gt;Integer Overflow&lt;/h3&gt;
&lt;p&gt;Vulnerability specific to languages with no range checking. The flaw is caused by the developer failing to detect that an integer exceeded the maximum possible value and rolled back to zero, to a large negative integer, or to some hardware-specific  result.&lt;/p&gt;
&lt;p&gt;Integer underflow is the opposite effect: crossing the minimum value and rolling over to a very large positive integer.&lt;/p&gt;
&lt;h3&gt;Pointer Management Vulnerabilities&lt;/h3&gt;
&lt;p&gt;In languages that use raw memory pointers such as C or C++, it is possible to use pointers that are either unitized or nor longer valid (dangling). These vulnerabilities will corrupt the internal state of the program and allow an attacker to execute attacker-supplied code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/The-Tangled-Web-Securing-Applications/dp/1593273886"&gt;The Tangled Web&lt;/a&gt;&lt;/p&gt;</summary><category term="XSS"></category><category term="CSRF"></category><category term="XSSI"></category><category term="Buffer_Overflow"></category><category term="LFI"></category><category term="RFI"></category></entry></feed>