<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chmod +x singularity.sh</title><link>http://bt3gl.github.io/</link><description></description><atom:link href="http://bt3gl.github.io/feeds/ai-ml.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 16 Feb 2019 04:19:00 -0500</lastBuildDate><item><title>Thinking about Machine Learning Data Pipelines</title><link>http://bt3gl.github.io/thinking-about-machine-learning-data-pipelines.html</link><description>&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/data_pip.png" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;Almost every day I have a new idea of some machine learning model for an app or some feature. Machine learning involves tasks that includes data sourcing, data ingestion, data transformation, pre-processing data for use in training, training a model and hosting the model. Additionally, to get value out of machine learning models we need an architecture and process in place to repeatedly and consistently train new models and retrain existing models with new data.&lt;/p&gt;
&lt;p&gt;For example, for a movie dataset from external source on internet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we are in AWS, we could upload it to &lt;strong&gt;S3&lt;/strong&gt; and and then bring to &lt;strong&gt;Dynamo DB&lt;/strong&gt;. The data could be ingested as a one time full-load as a batch or as a real-time stream.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There may be a need to do &lt;strong&gt;both batch and stream or just a batch or a stream&lt;/strong&gt;. In this case, the data could be &lt;strong&gt;full-loaded of data into Dynamo DB&lt;/strong&gt; and then &lt;strong&gt;stream new records into Kinesis stream using the Lambda function&lt;/strong&gt; as a source simulator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We could create a &lt;strong&gt;schema on the data stored in S3 and DynamoDB and perform ETL&lt;/strong&gt; on the data to prepare it for the machine learning process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we have an &lt;strong&gt;AWS S3 data lake&lt;/strong&gt; ready, we could use &lt;strong&gt;Amazon Sagemaker for model training and inference&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I start a little &lt;a href="https://github.com/bt3gl/Data-Pipelines"&gt;github repo for my persona research (dumps...) on Data Pipelines&lt;/a&gt; (PR your contribution!), in this post I add my little intro on the topic.&lt;/p&gt;
&lt;h2&gt;ETL: Extract, Transform, and Load&lt;/h2&gt;
&lt;p&gt;These three conceptual steps are how most data pipelines are designed and structured, serving as a blueprint for how raw data is transformed to analysis-ready data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Extract&lt;/strong&gt;: sensors wait for upstream data sources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt;: business logic is applied (e.g. filtering, grouping, and aggregation to translate raw data into analysis-ready datasets).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Load&lt;/strong&gt;: processed data is transported to a final destination.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Airflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/apache/airflow"&gt;Apache Airflow&lt;/a&gt; was a tool &lt;a href="https://medium.com/airbnb-engineering/airflow-a-workflow-management-platform-46318b977fd8"&gt;developed by Airbnb in 2014 and later open-sourced&lt;/a&gt;. It is a platform to programmatically author, schedule, and monitor workflows. When workflows are defined as code, they become more maintainable, versionable, testable, and collaborative.&lt;/p&gt;
&lt;p&gt;You can use Airflow to author workflows as directed acyclic graphs (DAGs) of tasks. The Airflow scheduler executes your tasks on an array of workers while following the specified dependencies. Rich command line utilities make performing complex surgeries on DAGs a snap. The rich user interface makes it easy to visualize pipelines running in production, monitor progress, and troubleshoot issues when needed.&lt;/p&gt;
&lt;p&gt;The key concepts are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DAG: a directed acyclic graph object that ties together all the tasks in a cohesive workflow and dictates the execution frequency (i.e. schedule).&lt;/li&gt;
&lt;li&gt;task: a unit of work to be executed that should be both atomic and idempotent. In Airflow there are two types of tasks: Operators and Sensors.&lt;/li&gt;
&lt;li&gt;operator: a specific type of work to be executed.&lt;/li&gt;
&lt;li&gt;sensor: a blocking task that runs until a condition is met or until it times out.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Airflow's architecture has the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;job definitions (in source control).&lt;/li&gt;
&lt;li&gt;CLI: to test, run, backfill, describe and clear parts of your DAGs.&lt;/li&gt;
&lt;li&gt;web application: to explore your DAGs definition, their dependencies, progress, metadata and logs (built in Flask).&lt;/li&gt;
&lt;li&gt;metadata repository (in MySQL or Postgres): keeps track of task job statuses.&lt;/li&gt;
&lt;li&gt;array of workers: runs jobs task instances in a distributed fashion.&lt;/li&gt;
&lt;li&gt;scheduler: fires up the task instances that are ready.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is &lt;a href="https://gist.github.com/robert8138/c6e492d00cd7b7e7626670ba2ed32e6a"&gt;a very simple toy example of an Airflow job&lt;/a&gt; that simply prints the date in bash every day after waiting for one second to pass, after the execution date is reached:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DAG&lt;/span&gt;  &lt;span class="c"&gt;# Import the DAG class&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.operators.bash_operator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BashOperator&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;airflow.operators.sensors&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TimeDeltaSensor&lt;/span&gt;

&lt;span class="n"&gt;default_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;owner&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;you&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;depends_on_past&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;start_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2018&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;dag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DAG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;dag_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;anatomy_of_a_dag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This describes my DAG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;default_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;default_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;schedule_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c"&gt;# This is a daily DAG.&lt;/span&gt;

&lt;span class="c"&gt;# t0 and t1 are examples of tasks created by instantiating operators&lt;/span&gt;
&lt;span class="n"&gt;t0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeDeltaSensor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;wait_a_second&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;dag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BashOperator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;task_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;print_date_in_bash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;bash_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_upstream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Luigi&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/spotify/luigi"&gt;Luigi data pipelining&lt;/a&gt; is Spotify's Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in.&lt;/p&gt;
&lt;p&gt;The basic unit of Luigi are task classes that model an atomic ETL operation, in three parts: a requirements part that includes pointers to other tasks that need to run before this task, the data transformation step, and the output. All tasks can be feed into a final table (e.g. on Redshift) into one file.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href="https://towardsdatascience.com/data-pipelines-luigi-airflow-everything-you-need-to-know-18dc741449b7"&gt;an example of a simple workflow in Luigi&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;luigi&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WritePipelineTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data/output_one.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pipeline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddMyTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;luigi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalTarget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data/output_two.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WritePipelineTask&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;decorated_line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;
            &lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decorated_line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Airflow vs. Luigi&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Airflow&lt;/th&gt;
&lt;th&gt;Luigi&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;web dashboard&lt;/td&gt;
&lt;td&gt;very nice&lt;/td&gt;
&lt;td&gt;minimal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Built in scheduler&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Separates output data and task state&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;calendar scheduling&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no, use cron&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parallelism&lt;/td&gt;
&lt;td&gt;yes, workers&lt;/td&gt;
&lt;td&gt;threads per workers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;finds new deployed tasks&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;persists state&lt;/td&gt;
&lt;td&gt;yes, to db&lt;/td&gt;
&lt;td&gt;sort of&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sync tasks to workers&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scheduling&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Learning References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/davidyakobovitch/data_science_resources"&gt;Data science resources&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/instacart/lore"&gt;Lorte data pipelining&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/apache/incubator-airflow"&gt;Incubator Airflow data pipelining&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/airflow-basic-for-beginners/"&gt;Udemy's Airflow for Beginners&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jghoman/awesome-apache-airflow"&gt;Awesome Airflow Resources&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rolanddb/airflow-on-kubernetes"&gt;Airflow in Kubernetes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/astronomer/astronomer"&gt;Astronomer: Airflow as a Service&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/aws-samples/data-pipeline-samples/tree/master/samples"&gt;Data pipeline samples&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="GoogleCloudPlatform/DataflowTemplates"&gt;GCP Dataflow templates&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/binhnguyennus/awesome-scalability"&gt;Awesome Scalability: a lot of articles and resources on the subject&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Enterprise Solutions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/netflix-techblog/evolution-of-the-netflix-data-pipeline-da246ca36905"&gt;Netflix data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC00QATOrSH4K2uOljTnnaKw"&gt;Netlix data videos&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineeringblog.yelp.com/2016/07/billions-of-messages-a-day-yelps-real-time-data-pipeline.html"&gt;Yelp data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineering.gusto.com/building-a-data-informed-culture/"&gt;Gusto data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@samson_hu/building-analytics-at-500px-92e9a7005c83."&gt;500px data pipeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.twitter.com/engineering/en_us/topics/insights/2018/ml-workflows.html"&gt;Twitter data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@zhaojunzhang/building-data-infrastructure-in-coursera-15441ebe18c2"&gt;Coursera data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/how-cloudflare-analyzes-1m-dns-queries-per-second/"&gt;Cloudfare data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://engineering.pandora.com/apache-airflow-at-pandora-1d7a844d68ee"&gt;Pandora data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@damesavram/running-airflow-on-heroku-ed1d28f8013d"&gt;Heroku data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zillow.com/data-science/airflow-at-zillow/"&gt;Zillow data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/airbnb-engineering/https-medium-com-jonathan-parks-scaling-erf-23fd17c91166"&gt;Airbnb data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/walmartlabs/how-we-built-a-data-pipeline-with-lambda-architecture-using-spark-spark-streaming-9d3b4b4555d3"&gt;Walmart data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robinhood.engineering/why-robinhood-uses-airflow-aed13a9a90c8"&gt;Robinwood data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eng.lyft.com/running-apache-airflow-at-lyft-6e53bb8fccff"&gt;Lyft data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://speakerdeck.com/vananth22/operating-data-pipeline-with-airflow-at-slack"&gt;Slack data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@RemindEng/beyond-a-redshift-centric-data-model-1e5c2b542442"&gt;Remind data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/wish-engineering/scaling-analytics-at-wish-619eacb97d16"&gt;Wish data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://databricks.com/blog/2017/03/31/delivering-personalized-shopping-experience-apache-spark-databricks.html"&gt;Databrick data pipeline&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Courses &amp;amp; Videos&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.coursera.org/lecture/big-data-integration-processing/big-data-processing-pipelines-c4Wyd"&gt;Coursera's Big Data Pipeline course&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=3JYDT8lap5U"&gt;Industrial Machine Learning Talk&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Aloha, bt3&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Sat, 16 Feb 2019 04:19:00 -0500</pubDate><guid>tag:bt3gl.github.io,2019-02-16:thinking-about-machine-learning-data-pipelines.html</guid><category>python</category><category>data</category><category>airflow</category><category>etl</category><category>luigi</category></item><item><title>Studies in AI &amp; Pixels &amp; Waves - #12</title><link>http://bt3gl.github.io/studies-in-ai-pixels-waves-12.html</link><description>&lt;p&gt;&lt;img alt="cyber" height="300px" src="./cyberpunk/12.jpg" width="400px" /&gt;&lt;/p&gt;
&lt;h1&gt;In the Arxivs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1610.03017"&gt;Fully Character-Level Neural Machine Translation without Explicit Segmentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ismir2015.uma.es/articles/276_Paper.pdf"&gt;Modeling Genre with The Music Genome Project&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;In the News&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/document/d/1PcNYtTDC7XuG1O_JSdfj3QOQ7T4pvQxsr_-CT2OZXwI/edit"&gt;OpenAI's Unconference Notes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fastcompany.com/3063053/beyond-siri-the-next-generation-of-ai-assistants-is-smarter-specialists"&gt;Beyond Siri, The Next-Generation AI Assistants Are Smarter Specialists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Interesting Videos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yanpanlau.github.io/2016/10/11/Torcs-Keras.html"&gt;Using Keras and Deep Deterministic Policy Gradient to play TORCS&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Some Slides &amp;amp; Classes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://musicinformationretrieval.com/"&gt;Notes on Music Information Retrieval&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wzchen.com/data-science-books/"&gt;16+ Free Data Science Books&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pandora.app.box.com/s/mny69tb561esr4h4jb1hkfbqs07axpse/1/8959434374/75446836406/1"&gt;Inside Pandora The Explore-Exploit Dilemma in Recommendation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Aloha, bt3&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Sat, 08 Oct 2016 00:00:00 -0400</pubDate><guid>tag:bt3gl.github.io,2016-10-08:studies-in-ai-pixels-waves-12.html</guid></item><item><title>Studies in Machine Learning &amp; AI - #11</title><link>http://bt3gl.github.io/studies-in-machine-learning-ai-11.html</link><description>&lt;p&gt;&lt;img alt="cyber" height="300px" src="./cyberpunk/11.gif" width="400px" /&gt;&lt;/p&gt;
&lt;h1&gt;In the Arxivs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1609.05521"&gt;Playing FPS Games with Deep Reinforcement Learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1609.03126"&gt;Energy-based Generative Adversarial Network&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1609.04836"&gt;On Large-Batch Training for Deep Learning: Generalization Gap and Sharp Minima&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1609.05473"&gt;SeqGAN: Sequence Generative Adversarial Nets with Policy Gradient&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/1609.06647"&gt;Show and Tell: Lessons learned from the 2015 MSCOCO Image Captioning Challenge&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1609.05143"&gt;Target-driven Visual Navigation in Indoor Scenes using Deep Reinforcement Learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1609.07152"&gt;Input Convex Neural Networks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1609.06693"&gt;SoftTarget Regularization: An Effective Technique to Reduce Over-Fitting in Neural Networks&lt;/a&gt; (and also &lt;a href="https://arxiv.org/abs/1605.00055"&gt;DisturbLabel: Regularizing CNN on the Loss Layer&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;In the News&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.unofficialgoogledatascience.com/2016/08/next-generation-tools-for-data-science.html"&gt;Next generation tools for data science&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.asimovinstitute.org/neural-network-zoo/"&gt;The Neural Network Zoo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.cardiogr.am/three-challenges-for-artificial-intelligence-in-medicine-dfb9993ae750"&gt;Three Challenges for Artificial Intelligence in Medicine&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Interesting Videos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?feature=youtu.be&amp;amp;utm_campaign=Revue%20newsletter&amp;amp;utm_medium=Newsletter&amp;amp;utm_source=revue&amp;amp;v=wofXCQXq1pg"&gt;Prof. Yann LeCun - Deep Learning and the Future of AI&lt;/a&gt;. "Unsupervised learning is the Dark Matter (Energy) of ML".&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eyovmAtoUx0&amp;amp;feature=youtu.be"&gt;Bay Area Deep Learning School Day 1 at CEMEX auditorium, Stanford&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9dXiAecyJrY"&gt;Bay Area Deep Learning School Day 2 at CEMEX auditorium, Stanford&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QPkb5VcgXAM"&gt;Soumith Chintala's 'A path to unsupervised learning through adversarial networks'&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=NKiwFF_zBu4"&gt;Ian Goodfellow - Practical Methodology for Deploying Machine Learning&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Some Slides &amp;amp; Classes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.google.com/presentation/d/1CRSAs2WOKo5mFhh5Iu-xkDfyJsg_NDL1r5dRtj6_aHo/edit#slide=id.g1714a2be67_1_253"&gt;Deep learning for audio-based music recommendation
&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://people.orie.cornell.edu/andrew/orie6741/"&gt;Bayesian Machine Learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/gametheoryonline/playlists"&gt;Game Theory Online&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Github&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/openai/cleverhans"&gt;OpenAI's cleverhans: A library for benchmarking vulnerability to adversarial examples&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/LantaoYu/SeqGAN"&gt;Implementation of Sequence Generative Adversarial Nets with Policy Gradient&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/iassael/learning-to-communicate"&gt;Learning to Communicate with Deep Multi-Agent Reinforcement Learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alxndrkalinin/awesome-deepneuroimage"&gt;A curated list of awesome deep learning applications in the field of neurological image analysis&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;Learning to Communicate with Deep Multi-Agent Reinforcement Learning&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Aloha, bt3&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Sun, 25 Sep 2016 00:00:00 -0400</pubDate><guid>tag:bt3gl.github.io,2016-09-25:studies-in-machine-learning-ai-11.html</guid></item><item><title>Studies in Machine Learning &amp; AI - #10</title><link>http://bt3gl.github.io/studies-in-machine-learning-ai-10.html</link><description>&lt;p&gt;&lt;img alt="cyber" height="300px" src="./cyberpunk/10.jpg" width="400px" /&gt;&lt;/p&gt;
&lt;h2&gt;Papers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/0B3cxcnOkPx9AeWpLVXhkTDJINDQ/view"&gt;WaveNet: A Generative Model for Raw Audio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/pdf/1609.02993v1.pdf"&gt;Episodic Exploration for Deep Deterministic Policies:
An Application to StarCraft Micromanagement Tasks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1609.00408"&gt;Defeating Image Obfuscation with Deep Learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1609.04802"&gt;Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://deepmind.com/blog/wavenet-generative-model-raw-audio/"&gt;WaveNet: A Generative Model for Raw Audio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://distill.pub/2016/augmented-rnns/"&gt;Attention and Augmented Recurrent Neural Networks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.janexwang.com/blog/2016/9/10/attractor-state-part-1"&gt;Attractor State, Part 1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nextplatform.com/2016/09/13/nvidia-pushes-deep-learning-inference-new-pascal-gpus/"&gt;NVIDIA Announces Tesla P40 &amp;amp; Tesla P4 - Neural Network Inference, Big &amp;amp; Small&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nextplatform.com/2016/09/07/next-wave-deep-learning-architectures/"&gt;The Next Wave of Deep Learning Architectures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@katecrawford/artificial-intelligence-is-hard-to-see-a71e74f386db#.icgq55dzd"&gt;Artificial intelligence is hard to see&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.technologyreview.com/s/602344/the-extraordinary-link-between-deep-neural-networks-and-the-nature-of-the-universe/"&gt;The Extraordinary Link Between Deep Neural Networks and the Nature of the Universe&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://aiimpacts.org/what-if-you-turned-the-worlds-hardware-into-ai-minds/"&gt;What if you turned the world’s hardware into AI minds?&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.technologyreview.com/s/602274/three-grand-challenges-for-brain-science-that-can-be-solved-in-10-years/"&gt;Three Grand Challenges for Brain Science That Can Be Solved in 10 Years&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Xogn6veSyxA"&gt;Ian Goodfellow's lecture about Batch Normalization and Convolutional Networks.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=x1kf4Zojtb0"&gt;Nando de Freita's Learning to learn and compositionality with deep recurrent neural networks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=9c4z6YsBGQ0&amp;amp;feature=youtu.be"&gt;Generative Visual Manipulation on the Natural Image Manifold&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cmusatyalab.github.io/openface/demo-4-sphere/"&gt;CMU's Real-Time Face Embedding Visualization&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tools&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yaringal/DropoutUncertaintyExps#updated-results-compared-to-the-original-paper"&gt;Experiments used in "Dropout as a Bayesian Approximation: Representing Model Uncertainty in Deep Learning"&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Aloha, bt3&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Sat, 17 Sep 2016 00:00:00 -0400</pubDate><guid>tag:bt3gl.github.io,2016-09-17:studies-in-machine-learning-ai-10.html</guid></item><item><title>Studies in Machine Learning &amp; AI - #9</title><link>http://bt3gl.github.io/studies-in-machine-learning-ai-9.html</link><description>&lt;p&gt;&lt;img alt="cyber" height="300px" src="./cyberpunk/9.png" width="400px" /&gt;&lt;/p&gt;
&lt;h2&gt;Papers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/abs/1608.08225"&gt;Why does deep and cheap learning work so well?&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://arxiv.org/pdf/1608.06993v1.pdf"&gt;Densely connected convolutional networks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1601.06759v3.pdf"&gt;Pixel Recurrent Neural Networks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1601.06759v3.pdf"&gt;Deep Neural Networks for YouTube Recommendations&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/pdf/1601.04920v1.pdf"&gt;Understanding Deep Convolutional Networks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ai100.stanford.edu/sites/default/files/ai_100_report_0901fnlc_single.pdf"&gt;Stanford's Artificial Intelligence and Life in 2030&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openai.com/blog/infrastructure-for-deep-learning/"&gt;OpenAI's Infrastructure for Deep Learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaan.io/unreasonable-confusion/"&gt;The Unreasonable Confusion of Variational Autoenconders&lt;/a&gt;.
*&lt;a href="https://medium.com/@ageitgey/machine-learning-is-fun-part-5-language-translation-with-deep-learning-and-the-magic-of-sequences-2ace0acca0aa#.k5x7tahrq"&gt;Machine Learning is Fun Part 5: Language Translation with Deep Learning and the Magic of Sequences&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rubenfiszel.github.io/posts/rl4j/2016-08-24-Reinforcement-Learning-and-DQN.html"&gt;Reinforcement Learning and DQN, learning to play from pixels&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wildml.com/2016/08/rnns-in-tensorflow-a-practical-guide-and-undocumented-features/"&gt;RNNs in Tensorflow, a practical guide and undocumented features&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kvfrans.com/variational-autoencoders-explained/#"&gt;Variational Autoencoders Explained&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nlpers.blogspot.com/2016/08/debugging-machine-learning.html"&gt;Debugging machine learning&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@Jaconda/a-concise-history-of-neural-networks-2070655d3fec#.xucie9dhi"&gt;A Concise History of Neural Networks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.quora.com/session/Yann-LeCun/1"&gt;Quora Session with Yann LeCun&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Aloha, bt3&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Sat, 10 Sep 2016 00:00:00 -0400</pubDate><guid>tag:bt3gl.github.io,2016-09-10:studies-in-machine-learning-ai-9.html</guid></item></channel></rss>