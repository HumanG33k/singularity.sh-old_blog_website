<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chmod +x singularity.sh</title><link>http://bt3gl.github.io/</link><description></description><atom:link href="http://bt3gl.github.io/feeds/mia-steinkirch.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 10 Feb 2018 02:00:00 -0500</lastBuildDate><item><title>So, What is a DevOps Engineer?</title><link>http://bt3gl.github.io/so-what-is-a-devops-engineer.html</link><description>&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/444.jpeg" width="400px" /&gt;&lt;/p&gt;
&lt;p&gt;Rad thing about working in startup engineering teams is that you can wear several hats. Perhaps the most uncomplicated one is the &lt;a href="(https://en.wikipedia.org/wiki/DevOps)"&gt;DevOps&lt;/a&gt; engineer. But... what is the DevOps thing really?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DevOps&lt;/strong&gt; is a set of software development practices that combine software development (Dev) and information-technology operations (Ops) to shorten the systems-development life cycle while delivering features, fixes, and updates frequently in close alignment with business objectives.&lt;/p&gt;
&lt;p&gt;And that describes it pretty well, but let's try and boil it down and talk about what kind of tasks you would be doing and what kind of technologies and software you would use. Now, this is going to be from my personal experience, yours might differ, but the basic principles should be there.&lt;/p&gt;
&lt;p&gt;These are the tasks for a DevOps engineer:&lt;/p&gt;
&lt;h2&gt;Local development&lt;/h2&gt;
&lt;p&gt;Create a local development platform.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set up a local development environment in a Virtual machine (like Virtualbox with Vagrant).&lt;/li&gt;
&lt;li&gt;Set up Docker &amp;amp; Docker compose for developers to copy and run and develop their applications in.&lt;/li&gt;
&lt;li&gt;Set up a skeleton of one of the applications/frameworks that the Developers work with to develop in.&lt;/li&gt;
&lt;li&gt;Document the above setup and make it easy to get started, preferably with one, or a few commands.&lt;/li&gt;
&lt;li&gt;Pick a favorite shell (e.g., ZSH) and have scripts for all repetitive tasks and have aliases in your profile &lt;a href="https://github.com/bt3gl/Shell-Scripts_and_Dotfiles"&gt;dotfile&lt;/a&gt; (e.g. &lt;code&gt;~/.zshrc&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Setup CI servers and deploy jobs to make it super easy to deploy, with as little hands-on for each deploy as possible, using tools like: Jenkins and CircleCI.&lt;/li&gt;
&lt;li&gt;Setup test servers that run tests when the CI deployjob runs at every commit or before a deployment for example.&lt;/li&gt;
&lt;li&gt;Setup security checks in CI deployjobs and scan Docker containers for vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Infrastructure&lt;/h2&gt;
&lt;p&gt;Setup production &amp;amp; stage servers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Setup these servers using whatever kind of &lt;a href="https://github.com/bt3gl/Data-Pipelines"&gt;infrastructure&lt;/a&gt; your company uses, like: &lt;a href="https://github.com/bt3gl/Intro_to_Kubernetes"&gt;Kubernetes&lt;/a&gt;, OpenShift, and Amazon AWS (or Microsoft Azure, or GCP). Use tools such as Skaffold and AWS SAM.&lt;/li&gt;
&lt;li&gt;Use automatic tools that define your infrastructure as code or configuration files to set up your servers: Terraform, Ansible, Puppet.&lt;/li&gt;
&lt;li&gt;Configure the software needed for your applications to run like: Apache, Nginx, MySQL / MariaDB, Elasticsearch.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Logging and Monitoring&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Setup servers for aggregated Logging using something like ELK Stack.&lt;/li&gt;
&lt;li&gt;Setup monitoring for your infrastructure with tools like Prometheus and &lt;a href="https://github.com/bt3gl/awesome-grafana"&gt;Grafana&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Setup monitoring for your applications with tools like ElastAlert and Pingdom.&lt;/li&gt;
&lt;li&gt;Integrate everything with Slack.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Setup backups for files and databases in Cronjobs.&lt;/li&gt;
&lt;li&gt;Setup mailservers.&lt;/li&gt;
&lt;li&gt;Do regular security maintenance on all the infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;Once you have everything set, you can sit back and enjoy the view ðŸ˜Ž.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Sat, 10 Feb 2018 02:00:00 -0500</pubDate><guid>tag:bt3gl.github.io,2018-02-10:so-what-is-a-devops-engineer.html</guid></item><item><title>Skaffold is a Kool K8s Tool!</title><link>http://bt3gl.github.io/skaffold-is-a-kool-k8s-tool.html</link><description>&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/w2.jpeg" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;I recently found out about &lt;a href="https://skaffold.dev/"&gt;Skaffold&lt;/a&gt;, a command-line tool &lt;a href="https://www.infoq.com/news/2018/03/skaffold-kubernetes"&gt;recently released by Google&lt;/a&gt;, and designed to make local Kubernetes development very easy, allowing for iterative local development against a Kubernetes cluster. It's really cool, check this out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It runs as a binary in your local machine (e.g., &lt;a href="https://formulae.brew.sh/formula/skaffold"&gt;easy install with brew&lt;/a&gt;, etc.).&lt;/li&gt;
&lt;li&gt;It uses &lt;code&gt;yaml&lt;/code&gt; configuration to describe how your application should be built: you specify the Docker images for your service(s) and Skaffold will tag them and push them to any valid Docker image repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;skaffold&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1beta9&lt;/span&gt;
&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;
&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;artifacts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gcr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;io&lt;/span&gt;&lt;span class="sr"&gt;/k8s-skaffold/s&lt;/span&gt;&lt;span class="n"&gt;kaffold&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;
&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;kubectl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;manifests&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;k8s&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;These images are ingested into your Kubernetes manifest and used to deploy changes to the clusters for every code change.&lt;/li&gt;
&lt;li&gt;Skaffold &lt;strong&gt;watches your local development directory for filesystem changes&lt;/strong&gt; and automatically builds and deploy your application to any local or remote Kubernetes cluster.&lt;/li&gt;
&lt;li&gt;It is integrated to &lt;code&gt;kubectl&lt;/code&gt; and &lt;a href="https://cloud.google.com/gcp"&gt;GCP&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Skaffold not only works on your laptop as a dev tool, it also lets you reuse the same &lt;code&gt;skaffold.yaml&lt;/code&gt; file to do deployments to your clusters in your continuous deployment system.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In resume, Skaffold makes development very easy: all you need to do is run &lt;code&gt;skaffold dev&lt;/code&gt; (local dev workflow: &lt;a href="https://kubernetes.io/docs/setup/minikube/"&gt;Minikube&lt;/a&gt;, etc.) or &lt;code&gt;skaffold run&lt;/code&gt; (continuous dev workflow: &lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt;, &lt;a href="https://travis-ci.org/"&gt;Travis CI&lt;/a&gt;, etc.) to start the entire process, creating Kubernetes pod(s) in a cluster with the Docker images of your application.&lt;/p&gt;
&lt;p&gt;In this single command, Skaffold:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;builds container images (locally or remotely),&lt;/li&gt;
&lt;li&gt;pushes container images if the target is not local cluster,&lt;/li&gt;
&lt;li&gt;updates Kubernetes manifests with image tags,&lt;/li&gt;
&lt;li&gt;deploys your application with &lt;code&gt;kubectl apply&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;streams logs from the pods,&lt;/li&gt;
&lt;li&gt;watches for changes in the source code and Kubernetes manifests, and then repeat 1-5.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3&gt;Some learning references&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://skaffold.dev/"&gt;Official documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/blog/products/gcp/introducing-skaffold-easy-and-repeatable-kubernetes-development?hl=is"&gt;Skaffold &amp;amp; GCP documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleContainerTools/skaffold"&gt;Github repository with examples&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://skaffold.dev/docs/references/yaml/"&gt;Skaffold Yaml References&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleContainerTools/skaffold/tree/master/examples"&gt;Skaffold examples&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ahmetb/skaffold-from-laptop-to-cloud"&gt;Skaffold: From code on your laptop to cloud&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ahmet.im/blog/skaffold/"&gt;Skaffold: happy Kubernetes workflows&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bejarano.io/how-to-write-great-container-images.html"&gt;How to write great container images&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Tue, 09 Jan 2018 05:00:00 -0500</pubDate><guid>tag:bt3gl.github.io,2018-01-09:skaffold-is-a-kool-k8s-tool.html</guid><category>docker</category><category>microservices</category><category>skaffold</category></item><item><title>So, What is GitOps?</title><link>http://bt3gl.github.io/so-what-is-gitops.html</link><description>&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/container.png" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;In general, there are two ways to deploy infrastructure changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Procedural way&lt;/strong&gt;: telling some tool what to do, e.g.: &lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt; (a glorified SSH). This is also known as a &lt;em&gt;push model&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Declarative way&lt;/strong&gt;: telling some tool what you want to have done, also known as &lt;em&gt;infrastructure as code&lt;/em&gt;, e.g.: &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt; and &lt;a href="https://www.pulumi.com/"&gt;Pulumi&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GitOps&lt;/strong&gt; is a term created by &lt;a href="https://www.weave.works/technologies/gitops/"&gt;WeWorks&lt;/a&gt; and works by using Git as a source of truth for &lt;em&gt;declarative&lt;/em&gt; infrastructure and applications. Automated CI/CD pipelines roll out changes to your infrastructure after commits are pushed and approved in Git. This model is becoming a popular operating way for building applications on Kubernetes. &lt;/p&gt;
&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/gitiops1.png" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;In GitOps you only push code. The developer interacts with the source control, which triggers the CI/CD tool (e.g. &lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt; or &lt;a href="https://circleci.com"&gt;CicleCI&lt;/a&gt;), and this pushes the docker image to the container register (e.g. &lt;a href="https://hub.docker.com/"&gt;docker hub&lt;/a&gt;). So you can see the Docker image as an artifact! &lt;/p&gt;
&lt;p&gt;To deploy that Docker image, you have a different &lt;strong&gt;config repository&lt;/strong&gt; which contains the k8s manifests. The CI/CD tool sends a pull request, and when it is merged, a &lt;strong&gt;magic pod&lt;/strong&gt; in the k8s cluster pulls the image to the cluster (similar to &lt;code&gt;kubectl apply&lt;/code&gt;, the popular &lt;a href="https://kubernetes.io/docs/reference/kubectl/kubectl/"&gt;k8s management tool&lt;/a&gt;, or even &lt;code&gt;helm update&lt;/code&gt;, another popular &lt;a href="https://helm.sh/"&gt;k8s production tool&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;Everything is controlled through pull requests. You push code, not containers. &lt;/p&gt;
&lt;p&gt;Wait, but what is this &lt;strong&gt;magic pod&lt;/strong&gt;? Glad you ask: the magic is performed by a tool called &lt;a href="https://github.com/fluxcd/flux"&gt;Flux&lt;/a&gt;, which automatically ensures that the state of a cluster matches the config in Git. It uses an operator in the cluster to trigger deployments inside Kubernetes, which means you don't need a separate CI/CD tool. It monitors all relevant image repositories, detects new images, triggers deployments, and updates the desired running configuration based on that.&lt;/p&gt;
&lt;p&gt;So, ultimately, the key advantages of GitOps models are: increased productivity and stabilities, higher reliability, and standardization. But mostly, no more manual &lt;code&gt;kubectl&lt;/code&gt; commands anymore!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Fri, 22 Sep 2017 09:00:00 -0400</pubDate><guid>tag:bt3gl.github.io,2017-09-22:so-what-is-gitops.html</guid><category>k8s</category><category>scalability</category><category>gitops</category><category>flux</category></item><item><title>Introducing Amigo, a tool to manage Google Cloud Platform Security</title><link>http://bt3gl.github.io/introducing-amigo-a-tool-to-manage-google-cloud-platform-security.html</link><description>&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/27.jpg" width="400px" /&gt;&lt;/p&gt;
&lt;p&gt;I wrote a tool called &lt;a href="https://github.com/bt3gl/Amigo-Google-Cloud-Platform-Security"&gt;Amigo&lt;/a&gt; that uses the GCP API to fetch an organization's project data and, with a set of customizable rules, searches for security risks!&lt;/p&gt;
&lt;h2&gt;How Amigo Works&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;i)&lt;/strong&gt; Amigo retrieves the GCP project list and their attributes (defined in a &lt;code&gt;config.yaml&lt;/code&gt; file).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ii)&lt;/strong&gt; For each attribute in a project, Amigo creates an updated report. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iii)&lt;/strong&gt; Amigo checks the previous report for differences (verifying when the data was modified). If there is a diff, Amigo logs the report for this diff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iv)&lt;/strong&gt; Amigo saves the resources data in a database, and then it checks the custom rules specified in &lt;code&gt;rules.yaml&lt;/code&gt;, reporting everything that violates those rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;v)&lt;/strong&gt; The &lt;strong&gt;science&lt;/strong&gt; generated by Amigo can be fed into ELK.&lt;/p&gt;
&lt;h2&gt;Setting up and Running Amigo&lt;/h2&gt;
&lt;h3&gt;Setting a Virtual Environment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installing Amigo&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating a Service Account&lt;/h3&gt;
&lt;p&gt;It should be done once, for the first time you run Amigo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a project and a service account at &lt;a href="https://console.cloud.google.com/iam-admin/serviceaccounts"&gt;https://console.cloud.google.com/iam-admin/serviceaccounts&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the IAM roles &lt;strong&gt;Security Reviewer&lt;/strong&gt; and &lt;strong&gt;Viewer permissions&lt;/strong&gt; to the service account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;strong&gt;Service Account JSON credential file&lt;/strong&gt; to a safe directory (e.g. your home directory). If amigo runs in other machines (or other people in the same organization is running Amigo), this key can be shared (and step 1. and 2. do not need to be repeated).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting gcloud&lt;/h3&gt;
&lt;p&gt;Install &lt;a href="https://cloud.google.com/sdk/downloads"&gt;gcloud SDK&lt;/a&gt; and authenticate with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;gcloud&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also check whether env variable &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; is pointing to the &lt;strong&gt;Service Account JSON credential file&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Setting the Config file&lt;/h3&gt;
&lt;p&gt;Copy &lt;code&gt;config.yaml_example&lt;/code&gt; to &lt;code&gt;config.yaml&lt;/code&gt; and customize it.&lt;/p&gt;
&lt;p&gt;In the bottom of this file you can edit the attributes that you want to report on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;### Attributes to inspect&lt;/span&gt;
&lt;span class="nl"&gt;gcp_attributes:&lt;/span&gt;
    &lt;span class="nl"&gt;compute:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;firewalls&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;networks&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;snapshots&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setting the Rules file&lt;/h3&gt;
&lt;p&gt;Inspect &lt;code&gt;rules.yaml&lt;/code&gt; either removing or adding rules that should be searched in the reports.&lt;/p&gt;
&lt;h3&gt;Running Amigo&lt;/h3&gt;
&lt;p&gt;Run amigo with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;amigo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This retrieves the data from GCP and generates JSON reports. These reports will be saved where is &lt;code&gt;reports_dir&lt;/code&gt; in the config file.&lt;/p&gt;
&lt;p&gt;It is advised to watch for STERR and STDOUT in the &lt;code&gt;log_file&lt;/code&gt; file defined in &lt;code&gt;config.yaml&lt;/code&gt; (default to &lt;code&gt;amigo_log.txt&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;amigo_log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Alerting with Amigo&lt;/h3&gt;
&lt;p&gt;Relevant reports (e.g., diff reports) are generated inside the directory defined as &lt;code&gt;results_dir&lt;/code&gt;, in the file &lt;code&gt;results.log&lt;/code&gt; (e.g., &lt;code&gt;/log/amigo.log&lt;/code&gt;). This is a JSON file that can be fed to ELK.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Creating Custom rules&lt;/h2&gt;
&lt;h3&gt;Firewalls Resource&lt;/h3&gt;
&lt;p&gt;Firewall reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;compute#firewall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/global/networks/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;direction&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;INGRESS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;sourceRanges&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;0.0.0.0/0&amp;quot;&lt;/span&gt;
  &lt;span class="cp"&gt;]&lt;/span&gt;,
  &amp;quot;name&amp;quot;: &amp;quot;default-allow-icmp&amp;quot;,
  &amp;quot;priority&amp;quot;: 65534,
  &amp;quot;allowed&amp;quot;: &lt;span class="cp"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;IPProtocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;icmp&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="cp"&gt;]&lt;/span&gt;,
  &amp;quot;creationTimestamp&amp;quot;: &lt;span class="nt"&gt;&amp;lt;Time&lt;/span&gt; &lt;span class="na"&gt;stamp&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;,
  &amp;quot;id&amp;quot;: &lt;span class="nt"&gt;&amp;lt;ID&amp;gt;&lt;/span&gt;,
  &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;/global/firewalls/default-allow-icmp&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Allow ICMP from anywhere&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Networks Resource&lt;/h3&gt;
&lt;p&gt;Snapshot reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;compute#network&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Default network for the project&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;subnetworks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/regions/&amp;lt;region&amp;gt;/subnetworks/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="cp"&gt;]&lt;/span&gt;,
  &amp;quot;autoCreateSubnetworks&amp;quot;: true,
  &amp;quot;routingConfig&amp;quot;: {
    &amp;quot;routingMode&amp;quot;: &amp;quot;REGIONAL&amp;quot;
  },
  &amp;quot;creationTimestamp&amp;quot;: &lt;span class="nt"&gt;&amp;lt;Time&lt;/span&gt; &lt;span class="na"&gt;stamp&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;,
  &amp;quot;id&amp;quot;: &lt;span class="nt"&gt;&amp;lt;ID&amp;gt;&lt;/span&gt;,
  &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;/global/networks/default&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Snapshots Resource&lt;/h3&gt;
&lt;p&gt;Snapshot reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;READY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;compute#snapshot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;storageBytes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;sourceDisk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/zones/us-central1-c/disks/deployhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;storageBytesStatus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UP_TO_DATE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;labelFingerprint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;sourceDiskId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;diskSizeGb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;licenses&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/compute/v1/projects/centos-cloud/global/licenses/centos-7&amp;quot;&lt;/span&gt;
  &lt;span class="cp"&gt;]&lt;/span&gt;,
  &amp;quot;creationTimestamp&amp;quot;: &lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;stamp&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;,
  &amp;quot;id&amp;quot;: &lt;span class="nt"&gt;&amp;lt;ID&amp;gt;&lt;/span&gt;,
  &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;/global/snapshots/snapshot-1-deployhost&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Instance Template Resource&lt;/h3&gt;
&lt;p&gt;Instance Template reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;compute#instanceTemplate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;machineType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;]&lt;/span&gt;
    },
    &amp;quot;disks&amp;quot;: &lt;span class="cp"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;deviceName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;persistent-disk-0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;compute#attachedDisk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;initializeParams&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;sourceImage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;global/images/&amp;lt;name&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;diskType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pd-standard&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;autoDelete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;boot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;mode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;READ_WRITE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;interface&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SCSI&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;PERSISTENT&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="cp"&gt;]&lt;/span&gt;,
    &amp;quot;scheduling&amp;quot;: {
      &amp;quot;automaticRestart&amp;quot;: true,
      &amp;quot;preemptible&amp;quot;: false,
      &amp;quot;onHostMaintenance&amp;quot;: &amp;quot;MIGRATE&amp;quot;
    },
    &amp;quot;serviceAccounts&amp;quot;: &lt;span class="cp"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;scopes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/auth/compute.readonly&amp;quot;&lt;/span&gt;
        &lt;span class="cp"&gt;]&lt;/span&gt;,
        &amp;quot;email&amp;quot;: &lt;span class="nt"&gt;&amp;lt;service&lt;/span&gt;&lt;span class="na"&gt;-account-email&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      }
    ],
    &amp;quot;metadata&amp;quot;: {
      &amp;quot;items&amp;quot;: &lt;span class="cp"&gt;[&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;kind&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;compute#metadata&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;creationTimestamp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2017-11-14T12:24:00.744-08:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;selfLink&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;project-name&amp;gt;/global/instanceTemplates/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Sat, 17 Dec 2016 00:00:00 -0500</pubDate><guid>tag:bt3gl.github.io,2016-12-17:introducing-amigo-a-tool-to-manage-google-cloud-platform-security.html</guid></item><item><title>Quick &amp; Dirty iOS ARKit with "Post Malone Balloon"</title><link>http://bt3gl.github.io/quick-dirty-ios-arkit-with-post-malone-balloon.html</link><description>&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/post_1.jpg" width="400px" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Augmented reality (AR) describes user experiences that add 2D or 3D elements to the live view from a deviceâ€™s camera in a way that makes those elements appear to inhabit the real world.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hi Everyone!&lt;/p&gt;
&lt;p&gt;In this post, I show how neat is to write an AR iOS application with &lt;a href="https://developer.apple.com/arkit/"&gt;ARKit&lt;/a&gt;, a framework that provides you high-level classes for &lt;strong&gt;tracking&lt;/strong&gt;, &lt;strong&gt;scene understanding&lt;/strong&gt;, and &lt;strong&gt;rendering&lt;/strong&gt;. More specifically, ARKit is a session-based framework. This means that everything will happen in a concrete session. Sessions are a way of encapsulating the logic and data contained within a defined period of the applications activity. It relates the virtual objects with the real world by means of the Tracking.&lt;/p&gt;
&lt;p&gt;This app runs an ARKit world tracking session with content displayed in a &lt;a href="https://developer.apple.com/documentation/spriteKit"&gt;SpriteKit&lt;/a&gt; 2D view. Every session has a scene that will render the virtual objects in the real world, accessed using the iOS device sensors.&lt;/p&gt;
&lt;p&gt;But, before everything, I recommend you to watch &lt;a href="https://developer.apple.com/videos/play/wwdc2017/602/"&gt;WWDC 2017's 'Introducing ARKit: Augmented Reality for iOS'&lt;/a&gt;. It gives a nice overview of ARKit's capabilities.&lt;/p&gt;
&lt;p&gt;Ah, btw, the source code for this project is &lt;a href="https://github.com/bt3gl/AR_PostMalone"&gt;available for you at github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The source code for AR_PostMalone the following structure:&lt;/h2&gt;
&lt;h3&gt;&lt;code&gt;Info.plist&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;An information property list file is an XML file that contains essential configuration information for a bundled executable. Example of the information you want to add is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of your app (&lt;code&gt;&amp;lt;string&amp;gt;PostMaloneBalloon&amp;lt;/string&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Camera usage (&lt;code&gt;&amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Frameworks you need (&lt;code&gt;&amp;lt;key&amp;gt;UIRequiredDeviceCapabilities&amp;lt;/key&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;string&amp;gt;armv7&amp;lt;/string&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;string&amp;gt;arkit&amp;lt;/string&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;Assets.xcassets&lt;/code&gt; directory&lt;/h3&gt;
&lt;p&gt;Where you place assets such as the images used in your App (Post Malone head) and icons. A file &lt;code&gt;Content.json&lt;/code&gt; is placed inside every directory to describe the assets.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;Base.lproj&lt;/code&gt; directory&lt;/h3&gt;
&lt;p&gt;Contains two &lt;a href="https://www.raywenderlich.com/160521/storyboards-tutorial-ios-11-part-1"&gt;story board files&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LaunchScreen.storyboard&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Main.storyboard&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;Scene.swift&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Anchors are 3D points that correspond to real-world features that ARKit detects. Anchors are created in this class, together with the Sprite scene (Scene.sks). The class &lt;code&gt;Scene&lt;/code&gt; controls how the App is operating within the scenes. Rendering brings tracking and scene understanding together with your content.&lt;/p&gt;
&lt;p&gt;For our App, we are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defining the method &lt;code&gt;touchesBegan&lt;/code&gt;, where we define what happens when we click the scene.&lt;/li&gt;
&lt;li&gt;The sequence of movements is defined by &lt;code&gt;let sequence = SKAction.sequence([popSound, moveDown, moveDownFloating, moveToBottom])&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When you touch the scene, a Post Malone Balloon head appears and starts to behave as a balloon (&lt;code&gt;moveDownFloating = ((arc4random() % 2)==0) ? moveLeftDown : moveRightDown&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The balloon either pops (&lt;code&gt;let popSound = SKAction.playSoundFileNamed("pop", waitForCompletion: false)&lt;/code&gt;) or fades after a second (&lt;code&gt;fadeOut = SKAction.fadeOut(withDuration: 1.0)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;An ARAnchor uses a 4Ã—4 matrix that represents the combined position, rotation or orientation, and scale of an object in three-dimensional space (as in &lt;code&gt;var translation = matrix_identity_float4x4&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;ViewController.swift&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This view is managed by the class ViewController, which inherits from &lt;code&gt;ARSKViewDelegate&lt;/code&gt; so that we can create a &lt;code&gt;sceneView&lt;/code&gt; variable. This class has methods for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Views&lt;/li&gt;
&lt;li&gt;Scaling and placing the view.&lt;/li&gt;
&lt;li&gt;View when it loads (and load the pre-defined scene from &lt;a href="https://developer.apple.com/documentation/spritekit/skscene"&gt;SKScene&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;View to appear and disappear.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sessions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Session interrupted.&lt;/li&gt;
&lt;li&gt;Session ended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;AppDelegate.swift&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This is where we call the class &lt;code&gt;AppDelegate&lt;/code&gt;, which responds for &lt;code&gt;UIApplicationMain&lt;/code&gt;. In this class, we create a variable that will work as the window UI, and we have UI methods for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See if the application is about to move from active to inactive state (for example, pause ongoing tasks).&lt;/li&gt;
&lt;li&gt;Release shared resources and save user data.&lt;/li&gt;
&lt;li&gt;Change from the background to the active state.&lt;/li&gt;
&lt;li&gt;Restart any tasks that were paused while the application was inactive.&lt;/li&gt;
&lt;li&gt;Termination actions for when the application is about to terminate (for example, to save data if appropriate).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Some Terminology&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Field of view&lt;/strong&gt;: measured in degrees, is the extent of the observable world that is seen at any given moment (humans have a FOV of around 180Â°, but most HMDs offerÂ between 50Â and 110Â°).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Latency&lt;/strong&gt;: In VR, a 20-millisecond latency is considered low and acceptable for a comfortable experience.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Haptics&lt;/strong&gt;: recreate the sense of touch by applying forces, vibrations, or motions to the user, through feedback devices (example, vibrating game controllers).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stitching&lt;/strong&gt;: the process of combining multiple video sources with overlapping fields of view to produce a fully immersive 360Â°.Â &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Visual Inertial Odometry&lt;/strong&gt;: ARKit analyzes the phone camera and motion data in order to keep track of the world around the
ARSessionÂ object that manages the motion tracking and image processing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Fri, 16 Dec 2016 00:00:00 -0500</pubDate><guid>tag:bt3gl.github.io,2016-12-16:quick-dirty-ios-arkit-with-post-malone-balloon.html</guid></item></channel></rss>