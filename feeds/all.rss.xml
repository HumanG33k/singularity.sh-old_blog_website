<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Higher Bytes by bt3</title><link>http://bt3gl.github.io/</link><description></description><atom:link href="http://bt3gl.github.io/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 03 Nov 2014 04:20:00 -0500</lastBuildDate><item><title>On CRLs, OCSP, and a Short Review of Why Revocation Checking Doesn't Work (for Browsers)</title><link>http://bt3gl.github.io/on-crls-ocsp-and-a-short-review-of-why-revocation-checking-doesnt-work-for-browsers.html</link><description>&lt;p&gt;Today I am going to talk about some regulation details of &lt;strong&gt;SSL/TLS connections&lt;/strong&gt;. These connections rely on a chain of trust. This chain of trust is established by &lt;strong&gt;certificate authorities&lt;/strong&gt; (CAs), which serve as trust anchors to verify the validity of who a device thinks it is talking to. In technical terms, &lt;strong&gt;X.509&lt;/strong&gt; is an &lt;a href="http://en.wikipedia.org/wiki/ITU-T"&gt;ITU-T&lt;/a&gt; standard that specifies standard formats for things such as &lt;em&gt;public key certificates&lt;/em&gt; and &lt;em&gt;certificate revocation lists&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;public key certificate&lt;/strong&gt; is  how websites bind their identity to a &lt;em&gt;public key&lt;/em&gt; to allow  an encrypted session (SSL/TLS) with the user. The certificate includes information about the key, the owner's &lt;em&gt;identity&lt;/em&gt; (such as the DNS name), and the &lt;em&gt;digital signature&lt;/em&gt; of the entity that issued the certificate (the &lt;a href="http://en.wikipedia.org/wiki/Certificate_authority"&gt;Certificate Authority&lt;/a&gt;, also known as CA).  As a consequence, browsers and other &lt;a href="http://en.wikipedia.org/wiki/User_agent"&gt;user-agents&lt;/a&gt; should always be able to check the authenticity of these certificates before proceeding.&lt;/p&gt;
&lt;p&gt;Some organizations need SSL/TLS simply for confidentiality (encryption), while other organizations use it to enhance trust in their security and identity. Therefore, CAs issue different certificates with different levels of verification, ranging from just confirming the control of the domain name (&lt;em&gt;Domain Validation&lt;/em&gt;, DV) to more extensive identity checks (&lt;em&gt;Extended Validation&lt;/em&gt;, EV). For instance, if a site's DNS gets hijacked, while the attacker could be able to issue a controlled DV, she wouldn't be able to issue new EV certificates  just with domain validation.&lt;/p&gt;
&lt;p&gt;Since EV certificates can be valid for two years and DV certificates for up to three years, they might lose their validity before they expire by age.  For instance, the website can lose control of its key or, as recently in the event of the &lt;a href="http://heartbleed.com/"&gt;Heartbleed bug&lt;/a&gt;, a very large number of SSL/TLS websites needed to revoke and reissue their certificates. Therefore, the need for an efficient revocation machinery is evident.&lt;/p&gt;
&lt;p&gt;For many years,  two ways of revoking a certificate have prevailed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;by checking a  &lt;strong&gt;Certificate Revocation Lists&lt;/strong&gt; (CRLs), which are lists of serial numbers of certificates that have been revoked, provided by &lt;em&gt;each CA&lt;/em&gt;. As one can imagine, they can become quite large.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by a communication protocol named &lt;strong&gt;Online Certificate Status Protocol&lt;/strong&gt; (OCSP), which allows a system to check with a CA for the status of a single certificate without pulling the entire CRL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While CRLs are long lists and OCSP only deals with a single certificate, they are both methods of getting signed statements about the status of a certificate; and they both present issues concerning privacy, integrity, and availability. In this post I discuss some of these issues and I review possible alternatives.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Broken Models&lt;/h2&gt;
&lt;h3&gt;Certificate Revocation Lists (CRLs)&lt;/h3&gt;
&lt;p&gt;A CRL is a list of  serial numbers (such as &lt;code&gt;54:99:05:bd:ca:2a:ad:e3:82:21:95:d6:aa:ee:b6:5a&lt;/code&gt;) of unexpired security certificates which have been revoked by their issuer and should not be trusted.&lt;/p&gt;
&lt;p&gt;Each CA maintains and publishes its own CRL. CRLs are in continuous changes: old certificates expire due to their age and serial numbers of newly revoked certificates are added.&lt;/p&gt;
&lt;p&gt;The main issue here is that the original &lt;em&gt;public key infrastructure&lt;/em&gt; (PKI) scheme does not scale. Users all over the Internet are constantly checking for  revocation and having to download files that can be many MB.  In addition, although CRL can be cached, they are still very volatile, turning CAs into a major performance bottleneck on the Internet.&lt;/p&gt;
&lt;h3&gt;Online Certificate Status Protocol (OCSP)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tools.ietf.org/html/rfc2560"&gt;OCSP was intended to replace the CRL system&lt;/a&gt;, however it presented several issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Reliability&lt;/em&gt;: Every time any user connects to any secured website, her  browser must query the CA's OCSP server. The typical CA issues certificates for hundreds of thousands of individual websites and the checks can be  up to  seconds.  Also, the CA's OCSP server might experience downtime! If a server is offline, overloaded, under attack, or unable to reply for any reason, certificate validity cannot be confirmed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Privacy&lt;/em&gt;: CAs can learn the IP address of users and which websites they wish to securely visit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Security&lt;/em&gt;: Browsers can not be sure that a CA's server is reachable (&lt;em&gt;e.g.&lt;/em&gt;, captive portals that require one to sign in on a HTTPS site, but blocks traffic to all other sites, including CA's OCSP servers).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One attempt to circumvent the lack of assurance of a server's reliability was issuing OCSP checks with a &lt;strong&gt;soft-fail&lt;/strong&gt; option. In this case, online revocation checks which result in a &lt;em&gt;network error would be ignored&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This brings serious issues. A simple example is when an &lt;a href="http://www.thoughtcrime.org/papers/ocsp-attack.pdf"&gt;attacker can intercept HTTPS traffic and make online revocation checks appear to fail, bypassing OCSP checks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the flip side, it's also not a good idea to enforce a &lt;strong&gt;hard-fail&lt;/strong&gt; check:  OCSP servers are pretty flaky/slow and you do not want to relay on their capabilities (DDoS attackers would love this though).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Some Light in a Solution&lt;/h2&gt;
&lt;p&gt;There are several attempts of solution for the revocation problem but none of them has been regarded as the definitive one. Here some of them:&lt;/p&gt;
&lt;h3&gt;CRLSets&lt;/h3&gt;
&lt;p&gt;Google Chrome uses &lt;a href="https://dev.chromium.org/Home/chromium-security/crlsets"&gt;&lt;strong&gt;CRLSets&lt;/strong&gt;&lt;/a&gt; int its update mechanism to send lists of serial numbers of revoked certificates which are constantly added by crawling the CAs.&lt;/p&gt;
&lt;p&gt;This method brings  more performance and reliability to the browser and, in addition, &lt;a href="https://www.imperialviolet.org/2014/04/19/revchecking.html"&gt;CRLSet updates occur at least daily&lt;/a&gt;, which is faster than most OCSP validity periods.&lt;/p&gt;
&lt;p&gt;A complementary initiative from Google is the  &lt;a href="http://www.certificate-transparency.org/what-is-ct"&gt;Certificate Transparency&lt;/a&gt; project. The objective is to help with  structural flaws in the SSL certificate system such as domain validation, end-to-end encryption, and the chains of trust set up by CAs.&lt;/p&gt;
&lt;h3&gt;OCSP stapling&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;OCSP Stapling&lt;/strong&gt; (&lt;a href="http://tools.ietf.org/html/draft-hallambaker-tlssecuritypolicy-03"&gt;TLS Certificate Status Request extension&lt;/a&gt;) is an alternative approach for checking the revocation status of certificates. It allows the presenter of a certificate to bear the resource cost involved in providing OCSP responses, instead of the CA, in a fashion reminiscent of the &lt;a href="http://en.wikipedia.org/wiki/Kerberos_(protocol)"&gt;Kerberos Ticket&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a simple example, the certificate holder is the one who periodically queries the OCSP server, obtaining a &lt;em&gt;signed time-stamped OCSP response&lt;/em&gt;. When users attempt to connect to the website, the response is signed with the SSL/TLS handshake via the Certificate Status Request extension response. Since the stapled response is signed by the CA, it cannot be forged (without the CA's signing key).&lt;/p&gt;
&lt;p&gt;If the stapled OCSP has the &lt;a href="http://tools.ietf.org/html/draft-hallambaker-muststaple-00"&gt;Must Staple&lt;/a&gt; capability, it becomes hard-fail if a valid OCSP response is not stapled. To make a browser know this option, one can add a "must staple" assertion to the site's security certificate and/or create a new HTTP response header similar to &lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some fixable issue is that OCSP stapling supports only one response at a time. This is insufficient for sites that use several different certificates for a single page. Nevertheless, OCSP stapling is the most promising solution for the problem for now. The idea has been implemented by the servers for years, and recently, a &lt;a href="https://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/"&gt;few browsers are adopting it&lt;/a&gt;. If this solution is going to become mainstream, only time will show.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; The security of the Internet depends on the agent's ability to revoke compromised certificates, but the status quo is broken. There is  a urgent  need for rethinking the way things have been done!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Edited, 11/19/2014:&lt;/strong&gt; The &lt;strong&gt;EFF&lt;/strong&gt; just announced an attempt to help the CA  problem:  &lt;a href="https://www.eff.org/deeplinks/2014/11/certificate-authority-encrypt-entire-web"&gt;Let's Encrypt&lt;/a&gt;, "a new certificate authority (CA) initiative that aims to clear the remaining roadblocks to transition the Web from HTTP to HTTPS". The initiative is planned to be released in 2015. These are good news, but it is still not clear whether they are going to address the revocation problem with new solutions.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2011/03/18/revocation.html"&gt;Imperial Violet: Revocation Doesn't work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2014/04/19/revchecking.html"&gt;Imperial Violet: Don't Enable Revocation Checking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2014/04/29/revocationagain.html"&gt;Imperial Violet: Revocation Still Doesn't Work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/agl/876829"&gt;Proxy server for testing revocation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2012/02/05/crlsets.html"&gt;Revocation checking and Chrome's CRL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/chromium/issues/detail?id=361820"&gt;Discussion about OCSP checking at Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tools.ietf.org/html/draft-balfanz-tls-channelid-00"&gt;RFC Transport Layer Security (TLS) Channel IDs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.isecpartners.com/media/17919/revocation-whitepaper_pdf__2_.pdf"&gt;Fixing Revocation for Web Browsers, iSEC Partners&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.mozilla.org/images/e/e3/SSLcertRevocation.pdf"&gt;Proposal for Better Revocation Model of SSL Certificates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ssllabs.com/ssltest/"&gt;SSL Server Test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digicert.com/help/"&gt;SSL Certificate Checker&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3</dc:creator><pubDate>Mon, 03 Nov 2014 04:20:00 -0500</pubDate><guid>tag:bt3gl.github.io,2014-11-03:on-crls-ocsp-and-a-short-review-of-why-revocation-checking-doesnt-work-for-browsers.html</guid><category>CRL</category><category>CRLSets</category><category>OCSP</category><category>TLS</category><category>Chrome</category></item><item><title>A Closer Look at Chrome's Security I: Understanding V8</title><link>http://bt3gl.github.io/a-closer-look-at-chromes-security-i-understanding-v8.html</link><description>&lt;p&gt;&lt;a href="http://blogoscoped.com/google-chrome/"&gt;In 2008, Google released a sandbox-oriented browser&lt;/a&gt;, that was assembled from several different code libraries from Google and third parties (for instance, it borrowed a rendering machinery from the open-source  &lt;a href="https://www.webkit.org/"&gt;Webkit layout engine&lt;/a&gt;, and later, later changing it to a forked version, &lt;a href="http://en.wikipedia.org/wiki/Blink_(layout_engine)"&gt;Blink&lt;/a&gt;).  Six years later, Chrome has became the preferred browser for &lt;a href="http://en.wikipedia.org/wiki/File:Usage_share_of_web_browsers_(Source_StatCounter).svg"&gt;half of users in the Internet&lt;/a&gt;. This is enough reason to investigate further how security is dealt in this engine. With this motivation in mind, I summarize the main features of Chrome and its &lt;a href="http://www.chromium.org/Home"&gt;Chromium Project&lt;/a&gt;, describing the pristine way of processing JavaScript with the &lt;strong&gt;V8 JavaScript virtual machine&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;They way computers talk...&lt;/h2&gt;
&lt;p&gt;In mainstream computer languages, a source code can either be &lt;strong&gt;compiled&lt;/strong&gt; or &lt;strong&gt;interpreted&lt;/strong&gt; . This is &lt;a href="https://www.youtube.com/watch?v=_C5AHaS1mOA"&gt;a very simple concept&lt;/a&gt;...&lt;/p&gt;
&lt;h3&gt;Compilers and Interpreters&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Compilers&lt;/strong&gt;  produce  an intermediate form called &lt;strong&gt;code object&lt;/strong&gt;, which is like machine code but augmented with symbols tables  to make executable blocks (library files, with file objects). A linker is used to finally combine them to form executables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpreters&lt;/strong&gt; execute instructions without compiling into machine language first. They can either parse and execute the instructions, translate into intermediate representation such as &lt;strong&gt;bytecode&lt;/strong&gt; or &lt;strong&gt;abstract syntax trees&lt;/strong&gt; (ASTs),  or store precompiled code by a compiler.&lt;/p&gt;
&lt;p&gt;The truth is that things are generally mixed. For example, when you type some instruction in  Python's REPL, &lt;a href="http://akaptur.com/blog/2013/11/17/introduction-to-the-python-interpreter-3/"&gt;the language executes four steps&lt;/a&gt;: &lt;em&gt;lexing&lt;/em&gt; (breaks the code into pieces), &lt;em&gt;parsing&lt;/em&gt; (generates an AST with those pieces - it is the syntax analysis), &lt;em&gt;compiling&lt;/em&gt; (converts the AST into code objects - which are attributes of the function objects), and &lt;em&gt;interpreting&lt;/em&gt; (executes the code objects). By the way, bytecodes are attributes of the code object so to see them, you just need to call &lt;code&gt;func_code&lt;/code&gt; (code object) and &lt;code&gt;co_code&lt;/code&gt;(bytecode):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;d&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;S&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a similar way, in traditional JavaScript machineries code is represented by bytecode or AST and then executed in a &lt;em&gt;virtual machine&lt;/em&gt; or further compiled into machine code. when JavaScript interprets code, it executes roughly the following steps: &lt;em&gt;parsing&lt;/em&gt; and &lt;em&gt;preprocessing&lt;/em&gt;, &lt;em&gt;scope analysis&lt;/em&gt;, and &lt;em&gt;bytecode or translation to native&lt;/em&gt;. Just a note: the JavaScript engine represents bytecode using &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals/Bytecode"&gt;SpiderMonkey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we see that when modern languages choose the way they compile or interpret code, they are trading off with the speed they want things to run. Since browsers are preoccupied in deliver content the faster they can,  this is a fundamental concept.&lt;/p&gt;
&lt;h3&gt;Method JITs and Tracing JITs&lt;/h3&gt;
&lt;p&gt;To speed things up, instead of having the code being parsed and then executed (&lt;a href="http://en.wikipedia.org/wiki/Ahead-of-time_compilation"&gt;one at time&lt;/a&gt;),  &lt;strong&gt;dynamic translators&lt;/strong&gt;  (&lt;em&gt;Just-in-time&lt;/em&gt; translators, or JIT) can be used. JITs &lt;em&gt;translate intermediate representation into machine language  at runtime&lt;/em&gt;. They have the efficiency of running native code with the cost of startup time plus increased memory (when the bytecode or AST are first compiled).&lt;/p&gt;
&lt;p&gt;Engines have different policies on code generation, which can roughly be grouped into types: &lt;strong&gt;tracing&lt;/strong&gt; and &lt;strong&gt;method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method JITs&lt;/strong&gt; emit native code for every block (method) of code and update references dynamically. Method JITs can implement an &lt;em&gt;inline cache&lt;/em&gt; for rewriting type lookups at runtime.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;tracing JITs&lt;/strong&gt;, native code is only emitted when a certain block (method) is considered &lt;em&gt;important&lt;/em&gt;. An example is given by traditional JavaScript: if you load a script with functions that are never used, they are never compiled. Additionally, in JavaScript a  &lt;em&gt;cache&lt;/em&gt; is usually implemented due to the nature of its &lt;em&gt;dynamic typing system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As we will see below, V8 performs direct JIT compilation from  (JavaScript) source code to native machine code (IA-32, x86-64, ARM, or MIPS ISAs),  &lt;strong&gt;without transforming it to bytecode first&lt;/strong&gt;. In addition, V8 performs  dynamic several optimizations at runtime (including &lt;strong&gt;inline caching&lt;/strong&gt;). But let's not get ahead of ourselves! Also,  as a note, Google has implemented a technology called &lt;a href="http://code.google.com/p/nativeclient/"&gt;&lt;strong&gt;Native Client&lt;/strong&gt;&lt;/a&gt; (NaCl), which  allows one to provide compiled code to the  Chrome browser.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The way JavaScript rolls...&lt;/h2&gt;
&lt;p&gt;JavaScript's integration with &lt;a href="http://en.wikipedia.org/wiki/Netscape_Navigator"&gt;Netscape Navigator&lt;/a&gt; in the mid-90s made it easier for developers to access HTML page elements such as &lt;em&gt;forms&lt;/em&gt;, &lt;em&gt;frames&lt;/em&gt;, and &lt;em&gt;images&lt;/em&gt;. This was essential for JavaScript's accession to become the most popular scripting engine for the web.&lt;/p&gt;
&lt;p&gt;However, the language's high dynamically behavior (that I'm briefly discussing here) came with a price: in the mid-2000s browsers had very slow  implementations that did not scale with code size or &lt;em&gt;object allocation&lt;/em&gt;. Issues such as &lt;em&gt;memory leaks&lt;/em&gt; when running web apps were becoming mainstream. It was clear that things would only get worse and a new JavaScript engine was a need.&lt;/p&gt;
&lt;h3&gt;JavaScript's Structure&lt;/h3&gt;
&lt;p&gt;In JavaScript, every object has a &lt;em&gt;prototype&lt;/em&gt;, and the prototype is also an object. All JavaScript objects inherit their properties and methods from their prototype.&lt;/p&gt;
&lt;p&gt;So, for example, supposing an application that has an object &lt;em&gt;Point&lt;/em&gt; (borrowed from the &lt;a href="https://developers.google.com/v8/design"&gt;official documentation&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can create several objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can access the propriety &lt;code&gt;x&lt;/code&gt; in these object by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above implementation, we would have two different Point objects that do not share any structure. This is because JavaScript is &lt;strong&gt;classless&lt;/strong&gt;: you create  new objects on the fly and dynamically add or remove proprieties. Functions can move from an object to another. Objects with same type can appear in the same sites in the program with no constraints.&lt;/p&gt;
&lt;p&gt;Furthermore, to store their object proprieties, most JavaScript engines use a &lt;em&gt;dictionary-like data structure&lt;/em&gt;. Each property access demands a dynamic lookup to resolve their location in memory. This is opposed as &lt;em&gt;static&lt;/em&gt; languages such as Java, where instance variables are located at fixed offsets determined by the compiler (due to the &lt;em&gt;fixed&lt;/em&gt; object layout by the &lt;em&gt;object's class&lt;/em&gt;). In this case, access is given by a simple memory load or store (a single instruction).&lt;/p&gt;
&lt;h3&gt;JavaScript's Garbage Collection&lt;/h3&gt;
&lt;p&gt;Garbage collection is a form of &lt;em&gt;automatic memory management&lt;/em&gt;: the attempt of reclaiming memory occupied by objects that are not being used any longer (&lt;em&gt;i.e.&lt;/em&gt;, if an object loses its reference, the object's memory has to be reclaimed).&lt;/p&gt;
&lt;p&gt;The other possibility is &lt;em&gt;manual memory management&lt;/em&gt;, which requires the developer to specify which objects need to be deallocated. However, manual garbage collection can result in bugs such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Dangling&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;piece&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;freed&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;still&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="n"&gt;bugs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;had&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;freed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Memory&lt;/span&gt; &lt;span class="n"&gt;leaks&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;fails&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;occupied&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;had&lt;/span&gt; &lt;span class="n"&gt;became&lt;/span&gt; &lt;span class="n"&gt;unreachable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;leading&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;exhaustion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As one could guess, JavaScript has automatic memory management. Actually, the core design flaw of traditional JavaScript engines is &lt;strong&gt;bad garbage collection behavior&lt;/strong&gt;. The problem is that JavaScript engines do not know exactly where all the pointers are, and they will search through the entire execution stack to see which data looks like pointers (for instance, integers can look like a pointer to an address in the heap).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Introducing V8&lt;/h2&gt;
&lt;p&gt;A solution for the issues presented above came from Google,  with  the &lt;strong&gt;V8 Engine&lt;/strong&gt;. V8 is an &lt;a href="https://code.google.com/p/v8/"&gt;open source JavaScript engine&lt;/a&gt; written in C++ that gave birth to Chrome. V8 has a way to categorize the highly-dynamic JavaScript objects into classes, bringing techniques from static class-based languages. In addition, as I mentioned in the the beginning, V8 compiles JavaScript to native machine code before executing it.&lt;/p&gt;
&lt;p&gt;In terms of performance, besides direct compilation to native code, three main features in V8 are fundamental:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Hidden&lt;/span&gt; &lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;caching&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;optimization&lt;/span&gt; &lt;span class="n"&gt;technique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Efficient&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;garbage&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take a look at each of them.&lt;/p&gt;
&lt;h3&gt;V8's Hidden Class&lt;/h3&gt;
&lt;p&gt;In V8, as execution goes on, objects that end up with the same properties will share the same &lt;strong&gt;hidden class&lt;/strong&gt;. This way the engine  applies dynamic optimizations.&lt;/p&gt;
&lt;p&gt;Consider the Point example from before: we have two different objects, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Instead of having them completely independent, V8 makes them share a hidden class. So instead of creating two objects, we have &lt;em&gt;three&lt;/em&gt;. The hidden class shows that both objects have the same proprieties and an object changes its hidden class when a new property is added.&lt;/p&gt;
&lt;p&gt;So, for our example, if another Point object is created:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initially the Point object has no properties so the newly created object refers to the initial class &lt;strong&gt;C0&lt;/strong&gt;. The value is stored at offset zero of  the Point object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When property &lt;code&gt;x&lt;/code&gt; is added, V8 follows the hidden class transition from &lt;strong&gt;C0&lt;/strong&gt; to &lt;strong&gt;C1&lt;/strong&gt; and writes the value of &lt;code&gt;x&lt;/code&gt; at the offset specified by &lt;strong&gt;C1&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When property &lt;code&gt;y&lt;/code&gt; is added, V8 follows the hidden class transition from &lt;strong&gt;C1&lt;/strong&gt; to &lt;strong&gt;C2&lt;/strong&gt; and writes the value of &lt;code&gt;y&lt;/code&gt; at the offset specified by &lt;strong&gt;C2&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of having a generic lookup for a propriety, V8  generates an efficient machine code to search the propriety. The machine code generated for accessing &lt;code&gt;x&lt;/code&gt; is something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# ebx = the point object&lt;/span&gt;
&lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;jne&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;miss&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of a complicated lookup at the propriety, the propriety reading translates into three machine operations!&lt;/p&gt;
&lt;p&gt;It might seem inefficient to create a new hidden class whenever a property is added. However, because of the class transitions the hidden classes can be reused several times. It turns out that most of the access to objects are within the same hidden class.&lt;/p&gt;
&lt;h3&gt;V8's Inline caching&lt;/h3&gt;
&lt;p&gt;When the engine runs the code, it does not know about the hidden class. V8 optimizes property access by predicting that the class will also be used for all future objects accessed in the same section of code, and adds the information to the &lt;strong&gt;inline cache code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inline caching is a class-based object-oriented optimization technique employed by some language runtimes.  The concept of inline caching is based on the  observation that the objects that occur at a particular call site are often of the same type. Therefore, performance can be increased by storing the result of a method lookup &lt;em&gt;inline&lt;/em&gt; (at the call site).&lt;/p&gt;
&lt;p&gt;If V8 has predicted correctly the property's value, this is assigned in a single operation. If the prediction is incorrect, V8 patches the code to remove the optimization. To facilitate this process, call sites are assigned in four different states:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Unitilized&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Initial&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;Pre&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;monomorphic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Behaves&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;uninitialized&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt;  &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;monophorfic&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;It&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;executed&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;once&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;initialization&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Monomphorpic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Very&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Recodes&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;hidden&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;seem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;Megamorphic&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Like&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="n"&gt;stub&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;since&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;replaces&lt;/span&gt; &lt;span class="n"&gt;itself&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In conclusion, the combination of using hidden classes to access properties with inline caching (plus  machine code generation) does optimize in cases where  type of objects are frequently created and accessed in a similar way. This greatly improves the speed at which most JavaScript code can be executed.&lt;/p&gt;
&lt;h3&gt;V8's Efficient Garbage Collecting&lt;/h3&gt;
&lt;p&gt;In V8, a &lt;strong&gt;precise garbage collection&lt;/strong&gt; is used. &lt;em&gt;Every pointer's location are known on the execution stack&lt;/em&gt;, so V8 is able to implement incremental garbage collection. V8 can migrate an object to another place and just rewire the pointer.&lt;/p&gt;
&lt;p&gt;In summary, &lt;a href="https://developers.google.com/v8/design#garb_coll"&gt;V8's garbage collection&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;stops&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;execution&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;performing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;garbage&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;processes&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;cycles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimizing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;impact&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;stopping&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;knows&lt;/span&gt; &lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avoiding&lt;/span&gt; &lt;span class="n"&gt;falsely&lt;/span&gt; &lt;span class="n"&gt;identifying&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;All right, enough of digression. This was a preparation for the second post in the series, where I go through the security features in Chrome (soon to come).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3</dc:creator><pubDate>Sat, 01 Nov 2014 04:20:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-11-01:a-closer-look-at-chromes-security-i-understanding-v8.html</guid><category>V8</category><category>JIT</category><category>JavaScript</category><category>garbage_collection</category><category>cache</category><category>bytecode</category><category>Chrome</category><category>Python</category></item><item><title>A List of Common Web Vulnerabilities</title><link>http://bt3gl.github.io/a-list-of-common-web-vulnerabilities.html</link><description>&lt;p&gt;Although nomenclatures don't help  much when you facing a security problem, I am keeping this list here for some useful organization. It is constantly been updated.&lt;/p&gt;
&lt;h2&gt;Vulnerabilities to Web Applications&lt;/h2&gt;
&lt;h3&gt;Cross-site Scripting (XSS)&lt;/h3&gt;
&lt;p&gt;HTML has five characters that are reserved: angle brackets, single and double quotes, and ampersand. The ampersand should never appear in most HTML sections. Both angle brackets shouldn't be used inside a tag, unless  properly quoted. Quote characters inside a tag can also be harmless in text. To allow these characters to appear in problematic locations, an encoding based in an ampersand-prefixed and a semicolon-terminated scheme is used: the &lt;a href="http://www.w3schools.com/html/html_entities.asp"&gt;Entity Encoding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;XSS is caused by  insufficient input validation or output escaping. This can allow an attacker to insert HTML markup or scripts in a vulnerable website. The injected  code will have plenty of access in this site, and in many cases, to the HTTP cookies stored by the client.&lt;/p&gt;
&lt;h4&gt;Example of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;em&gt;password managers&lt;/em&gt;, there is a risk of  amplification of XSS bugs. In the web applications that use &lt;em&gt;&lt;a href="https://www.owasp.org/index.php/HttpOnly"&gt;httponly&lt;/a&gt;&lt;/em&gt; cookies, a successful exploitation of an XSS flaw may give the attacker a transient access to the user's account (and password).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;XSS filtering:  implementations that compare portions of the current URL with any string appearing on the retrieved page or passed to APIs such as &lt;em&gt;&lt;a href="http://www.w3schools.com/jsref/met_doc_write.asp"&gt;document.write()&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="http://www.w3schools.com/jsref/prop_html_innerhtml.asp"&gt;innerHTML&lt;/a&gt;&lt;/em&gt;. If the comparison reveals a portion of JavaScript that may have originated with improperly escaped URL, the portion is substituted by a harmless string. However, the filter may also append  legitimate portion of the page as a non-functional parameter in the URL. In some cases, this can create XSS vectors! One should not rely on this mechanism.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cross Script Inclusion (XSSI)&lt;/h3&gt;
&lt;p&gt;JSON is a JavaScript syntax structure  to keep in-place object serialization.  The curly bracket &lt;strong&gt;{&lt;/strong&gt; is assumed to be the beginning of the object. Overloading curly  brackets means that JSON blocks will not be recognized properly in standalone statements.&lt;/p&gt;
&lt;p&gt;XSSI comes with the failure to secure sensitive JSON-like responses against being loaded on third-party sites via &lt;code&gt;&amp;lt;script src=..&amp;gt;&lt;/code&gt;, and leaking user-specific information in the response. It a risk whenever ambient authority credentials (such as cookies) are used by the server to generate user-specific JavaScript code.&lt;/p&gt;
&lt;h3&gt;Cross-site Request Forgery (CSRF, XSRF)&lt;/h3&gt;
&lt;p&gt;On cross-domain navigation, the browser includes any ambient credentials. To the server, a request originating from its own client-side code will appear as the same as the request from a rogue third-party site and  it might be granted the same privilege.&lt;/p&gt;
&lt;p&gt;CSRF is the failure to verify that a particular state-changing HTTP request received by the &lt;strong&gt;server-side&lt;/strong&gt; portion of the application was initiated from the expected &lt;strong&gt;client-side&lt;/strong&gt; origin. Any third-party website loaded in the browser can perform actions in behalf of the victim.&lt;/p&gt;
&lt;h4&gt;Examples of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Any two windows of frames opened in a browser will remain &lt;a href="http://en.wikipedia.org/wiki/Same-origin_policy"&gt;same-origin&lt;/a&gt; with each other even if the user logs out from one account and permitting third-party to submit password and username and log int an attacked account. For example, the attacker can open and keep a frame pointing to a sensitive page and then log the victim into the attacker-controlled account to execute some code injection. Despite the change of  HTTP credentials the code injected will access the previous loaded frame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In several home network routers, CSRF can permit attackers to access the device and intercept or modify the network traffic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Including a secret user- and session- specific value on the requests (as an additional query parameter or a hidden field). The attacker will not be able to read the value since access to cross-domain documents is restricted by the &lt;strong&gt;same-origin&lt;/strong&gt; policy.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Header Injection (Response Splitting)&lt;/h3&gt;
&lt;p&gt;Insufficient escaping of newlines in HTTP responses, generated by the server-side. This can lead to XSS or proxy cache poisoning.&lt;/p&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LF and CR characters must be stripped from any attacker-controlled values in the HTTP headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Mixed Content&lt;/h3&gt;
&lt;p&gt;Loading non-HTTPS sub-resources on HTTPS pages undoes most of the benefits of encryption. For scripts and applets, this makes the application vulnerable to active attackers, specially in open wireless networks.&lt;/p&gt;
&lt;h3&gt;Open Redirection&lt;/h3&gt;
&lt;p&gt;Applications that perform HTTP- or script-based requests to user-supplied URLs without constraining the possible destinations in any meaningful way, leading, for example, to XSS.&lt;/p&gt;
&lt;h3&gt;Referer Leakage&lt;/h3&gt;
&lt;p&gt;HTTP requests may include a &lt;em&gt;Referer&lt;/em&gt; header that contains the URL of documents that triggered the current navigation in some way. The header also may reveal some information about the user browsing habits, such as query parameters in the referring page.&lt;/p&gt;
&lt;p&gt;This vulnerability is created by disclosure of a sensitive URL by embedding an off-site sub-resource of providing an off-site link. Any security data encoded in the URL of the parent document will be leaked in the &lt;em&gt;Referer&lt;/em&gt; header.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Vulnerabilities to Web Application Design&lt;/h2&gt;
&lt;h3&gt;Cache Poising&lt;/h3&gt;
&lt;p&gt;Long-term pollution of the browser cache (or any proxy within) with a malicious version of the targeted web application. Encrypted web applications may be targeted due to response-splitting vulnerabilities. In non-encrypted traffic, network attackers may be able to modify responses too.&lt;/p&gt;
&lt;h3&gt;Clickjacking&lt;/h3&gt;
&lt;p&gt;The act of obscuring a portion of a web application so that the victim is not aware that individual clicks are delivered to other site.&lt;/p&gt;
&lt;h3&gt;Content and Character Set Sniffing&lt;/h3&gt;
&lt;p&gt;Possibility that the browser will ignore any authoritative content type of character set information provided by the server and interpret the returned document incorrectly.&lt;/p&gt;
&lt;h4&gt;Examples of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Scenarios where &lt;a href="http://www.w3.org/Protocols/rfc1341/4_Content-Type.html"&gt;Content-Type&lt;/a&gt; is ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Cookie Forcing/Injection&lt;/h3&gt;
&lt;p&gt;Possibility of blindly injecting HTTP cookies into the context of an otherwise impenetrable web application due to issues in how the mechanism is designed and implemented in  browsers. There are special concern to HTTPS applications.&lt;/p&gt;
&lt;h4&gt;Examples of exploitation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Cookie stuffing: deleting cookies belonging to another applications by overflowing the cookie jar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Denial-of-Service (DoS)&lt;/h3&gt;
&lt;p&gt;Any opportunity of the attacker to bring down a browser or server, or make the use of a targeted application  more difficult.&lt;/p&gt;
&lt;h3&gt;Framebusting&lt;/h3&gt;
&lt;p&gt;The possibility of a framed page navigating the top-level document to a new URL without having to satisfy &lt;strong&gt;same-origin&lt;/strong&gt; checks. It might be exploited for phishing.&lt;/p&gt;
&lt;h3&gt;HTTP Downgrade&lt;/h3&gt;
&lt;p&gt;Ability of an attacker to prevent the user from reaching an HTTPS version of a site or to downgrade an existing HTTPS session to HTTP.&lt;/p&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;Strict transport security&lt;/a&gt;:  The approach allows any site to instruct the browser that all future requests made to a particular hostname or domain should always use HTTPS and that any HTTP traffic should be automatically upgraded and submitted over  HTTPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Network Fenceposts&lt;/h3&gt;
&lt;p&gt;When websites let the browser to interact with destinations not directly accessible to the attacker, for example, with the systems on a victim's internal networks. This attack can be performed with help of &lt;a href="http://en.wikipedia.org/wiki/DNS_rebinding"&gt;DNS rebinding&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Attempts of mitigation:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Internet Explorer implements the zone model, a potential approach to the risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Vulnerabilities in the Server-Side&lt;/h2&gt;
&lt;h3&gt;Buffer Overflow&lt;/h3&gt;
&lt;p&gt;In low-level languages such as C or C++, buffer overflow happens when a program allows more information to be stored in a particular memory region than there is space to accommodate the incoming data, leading to the unexpected overwrite of other vital data structures.&lt;/p&gt;
&lt;h3&gt;Command Injection (SQL, PHP, Shellcode)&lt;/h3&gt;
&lt;p&gt;Due to insufficient input filtering or output escaping, an attacker-controlled strings may be processed as statements in an interpreted language used by the application.&lt;/p&gt;
&lt;h3&gt;Directory Traversal&lt;/h3&gt;
&lt;p&gt;Due to insufficient filtering (such as the failure to recognize &lt;code&gt;../&lt;/code&gt; segments) an application can be tricked into reading or writing files at arbitrary locations. Unconstrained file-writing bugs can be exploitable to run attacker-supplied code.&lt;/p&gt;
&lt;h3&gt;File Inclusion&lt;/h3&gt;
&lt;p&gt;If used without a qualifier or prefixed with a &lt;em&gt;local&lt;/em&gt; (LFI), the term is synonymous to read-related directory traversal. Remote file inclusion (RFI) is an alternative way to exploit file-inclusion vulnerabilities by specifying a URL rather than a valid file path. In some languages, a common API opens local files and fetches remote URLS, which might supplies the ability of retrieving attacker's files.&lt;/p&gt;
&lt;h3&gt;Format String Vulnerability&lt;/h3&gt;
&lt;p&gt;Several libraries accept templates (format strings) followed by a set of parameters that the function is expected to insert into the template at predefined locations. For example,  C has functions such as &lt;em&gt;printf&lt;/em&gt;, &lt;em&gt;syslog&lt;/em&gt;, etc. The vulnerability is caused by permitting attackers to supply the template to one of these functions. This can lead to  data leaks and code execution.&lt;/p&gt;
&lt;h3&gt;Integer Overflow&lt;/h3&gt;
&lt;p&gt;Vulnerability specific to languages with no range checking. The flaw is caused by the developer failing to detect that an integer exceeded the maximum possible value and rolled back to zero, to a large negative integer, or to some hardware-specific  result.&lt;/p&gt;
&lt;p&gt;Integer underflow is the opposite effect: crossing the minimum value and rolling over to a very large positive integer.&lt;/p&gt;
&lt;h3&gt;Pointer Management Vulnerabilities&lt;/h3&gt;
&lt;p&gt;In languages that use raw memory pointers such as C or C++, it is possible to use pointers that are either unitized or nor longer valid (dangling). These vulnerabilities will corrupt the internal state of the program and allow an attacker to execute attacker-supplied code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/The-Tangled-Web-Securing-Applications/dp/1593273886"&gt;The Tangled Web&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3</dc:creator><pubDate>Fri, 31 Oct 2014 06:30:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-31:a-list-of-common-web-vulnerabilities.html</guid><category>XSS</category><category>CSRF</category><category>XSSI</category><category>Buffer_Overflow</category><category>LFI</category><category>RFI</category></item><item><title>Quick and Dirty intro to OpenPGP &amp; GPG</title><link>http://bt3gl.github.io/quick-and-dirty-intro-to-openpgp-gpg.html</link><description>&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Pretty_Good_Privacy"&gt;Pretty Good Privacy&lt;/a&gt; (PGP) is a model that provides cryptographic privacy and authentication for data communication. It was created by &lt;a href="http://en.wikipedia.org/wiki/Phil_Zimmermann"&gt;Phil Zimmermann&lt;/a&gt; in 1991. Today, PGP is a &lt;a href="http://en.wikipedia.org/wiki/PGP_Corporation"&gt;company&lt;/a&gt; that sells a proprietary encryption program, &lt;a href="http://www.openpgp.org/"&gt;OpenPGP&lt;/a&gt; is the open protocol that defines how PGP encryption works, and &lt;a href="https://www.gnupg.org/"&gt;GnuGP&lt;/a&gt; is the free software.&lt;/p&gt;
&lt;p&gt;The distribution of PGP keys can be done using the concept of &lt;a href="http://en.wikipedia.org/wiki/Web_of_trust"&gt;web of trust&lt;/a&gt;. This is a decentralized way of establishing the authenticity  of a public key and its owner. If you want a cute (ludic) picture of the web of trust, check &lt;a href="https://twitter.com/doctorow"&gt;Cory Doctorow&lt;/a&gt;'s book &lt;a href="http://craphound.com/littlebrother/"&gt;Little Brother&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Almost 15 years after its creation, &lt;a href="https://firstlook.org/theintercept/2014/10/28/smuggling-snowden-secrets/"&gt;PGP continues to be &lt;em&gt;pretty good&lt;/em&gt;&lt;/a&gt;. But there is  still a &lt;a href="http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html"&gt;need for new solutions&lt;/a&gt; (and they appear to be &lt;a href="http://googleonlinesecurity.blogspot.com/2014/06/making-end-to-end-encryption-easier-to.html"&gt;coming soon&lt;/a&gt;). Perhaps the main issue with PGP is its persistence. If one key is compromised, any message from the past can be read.  That's where the concept of &lt;a href="http://en.wikipedia.org/wiki/Forward_secrecy"&gt;perfect forward secrecy &lt;/a&gt; comes in play, but this is a subject to another post. Meanwhile, I wrote this tutorial and I hope you find it fun.&lt;/p&gt;
&lt;h3&gt;I. Creating  GPG keys&lt;/h3&gt;
&lt;p&gt;Simply type the following in the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --gen-key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Chose &lt;a href="http://en.wikipedia.org/wiki/RSA_(cryptosystem)"&gt;RSA&lt;/a&gt; with  4096 bits long and expiration up to 5 years. Use a &lt;a href="https://www.eff.org/wp/defending-privacy-us-border-guide-travelers-carrying-digital-devices#passphrase"&gt;strong passphrase&lt;/a&gt; (keep it safe since it cannot be recovered).&lt;/p&gt;
&lt;h3&gt;II. Backup your Private Key&lt;/h3&gt;
&lt;p&gt;Save it with your soul:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --export-secret-keys --armor YOUR_EMAIL &amp;gt; YOUR_NAME-privkey.asc
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;III. Sharing your key&lt;/h3&gt;
&lt;p&gt;There are several ways you can share or publish your public key:&lt;/p&gt;
&lt;h4&gt;By sharing the key's fingerprint&lt;/h4&gt;
&lt;p&gt;The key's fingerprint is the same as its signature. Each PGP key has a unique fingerprint that allows you to confirm to others that they have received your actual public key without tampering. A fingerprint is a more convenient way to uniquely represent a key.&lt;/p&gt;
&lt;p&gt;To check the fingerprint of any key that you have in your keyring, type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --fingerprint EMAIL
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;By sending the ASCII file&lt;/h4&gt;
&lt;p&gt;You can copy your key to an file to be shared:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --export --armor  YOUR_EMAIL &amp;gt; YOUR_NAME-pubkey.asc
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;By  publishing it in a public key server&lt;/h4&gt;
&lt;p&gt;You can export your key to the &lt;a href="keys.gnupg.net"&gt;GnuPG public key server&lt;/a&gt;. For this,  use your key's name (the hexadecimal number in front of the key):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --send-key KEY_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also export it to  &lt;a href="pgp.mit.edu"&gt;pgp.mit.edu&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --keyserver hkp://pgp.mit.edu --send-key KEY_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;V. Importing Someone's Key&lt;/h3&gt;
&lt;p&gt;There are many ways you can import someone's public key:&lt;/p&gt;
&lt;h4&gt;By a shared file&lt;/h4&gt;
&lt;p&gt;If you have the ASCII file, you can type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --import PUBKEY_FILE
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;By Public Key Server&lt;/h4&gt;
&lt;p&gt;To search for someone's key in the public key server,  type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --search-keys NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: this is &lt;strong&gt;not&lt;/strong&gt; very safe since you can't be sure of the key's authenticity.&lt;/p&gt;
&lt;h3&gt;V. Signing a key: The Web of Trust&lt;/h3&gt;
&lt;p&gt;Signing a key tells your software that you trust the key that you have been provided (you have verified that it is associated with the person in question).&lt;/p&gt;
&lt;p&gt;To sign a key type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --sign-key  PERSON_EMAIL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should allow the person whose key you are signing to enjoy the advantages of your trusted relationship. This is done by sending her back the signed key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --export --armor PERSON_EMAIL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you received similar &lt;em&gt;trusted&lt;/em&gt; key, you can import it  into your GPG database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --import FILENAME
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;VI. Other Useful Commands&lt;/h3&gt;
&lt;h4&gt;To delete a key from your keyring:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --delete-key-name KEY_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;To  edit a key (for example, the expiration date):&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; gpg --edit KEY_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;If you have more than one key:&lt;/h4&gt;
&lt;p&gt;Edit &lt;code&gt;~/.gnupg/gpg.conf&lt;/code&gt; with your favorite key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;KEY_NAME&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Keep your keys fresh:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --refresh-keys
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;To list your keys:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --list-keys
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;And of course:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;man gpg
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;VII. Encrypting and Decryptying Messages&lt;/h3&gt;
&lt;p&gt;With someone's &lt;strong&gt;public key&lt;/strong&gt;, you can &lt;strong&gt;encrypt&lt;/strong&gt; messages that can only be decrypted with her secret key. You can also &lt;strong&gt;verify signatures&lt;/strong&gt; that were generated with her secret key.&lt;/p&gt;
&lt;p&gt;In the other hand, with your secret key you can &lt;strong&gt;decrypt&lt;/strong&gt; messages that were encrypted using your public key. You can also and  &lt;strong&gt;sign messages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With GPG, you  encrypt messages using the &lt;code&gt;--encrypt&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;The command below encrypts the message signing with your private key (to guarantee that is coming from you). It also generates the message in a text format, instead of raw bytes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --encrypt --sign --armor -r PERSON_EMAIL FILE_TO_BE_ENCRYPTED
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to be able to read this message with your own email address, you should add another recipient flag &lt;code&gt;-r&lt;/code&gt; with your email address.&lt;/p&gt;
&lt;p&gt;To decrypt a message, type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg FILENAME
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;VIII. Revoking a key&lt;/h3&gt;
&lt;p&gt;Whenever you need to revoke a key (because it might be compromised, for example), you can generate a revocation certificate with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --output my_revocation.asc --gen-revoke KEY_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To import the revocation into your keyring:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --import my_revocation.asc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, this command sends the revoked key to the public key server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;gpg --keyserver pgp.mit.edu --send-keys KEY_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Final Comments&lt;/h2&gt;
&lt;p&gt;If you prefer a GUI instead of the command line, I strongly recommend  &lt;a href="https://apps.fedoraproject.org/packages/seahorse/bugs"&gt;seahorse&lt;/a&gt;. It makes really easy to manage all your keys (not only OpenPGP) and passwords.&lt;/p&gt;
&lt;p&gt;Another nice (alpha) project is &lt;a href="https://keybase.io/"&gt;keybase.io&lt;/a&gt;. It's kind of a web of trust social network, where you can sign your key with your public profiles. Check &lt;a href="https://keybase.io/bt3"&gt;mine here&lt;/a&gt;. Encryption and decryption can be done in the command line with their &lt;a href="https://keybase.io/docs/command_line"&gt;node.js&lt;/a&gt; application. I don't trust uploading my private key anywhere, but I do think that the idea is better than a simple public key server.&lt;/p&gt;
&lt;p&gt;Finally, a word about browser plugins. Although there are several of them to encrypt webmail with OpenPGP,  such as &lt;a href="https://chrome.google.com/webstore/detail/mymail-crypt-for-gmail/jcaobjhdnlpmopmjhijplpjhlplfkhba?hl=en-US"&gt;mymail-crypt&lt;/a&gt; or  &lt;a href="https://www.mailvelope.com/"&gt;Mailvelope&lt;/a&gt;, I particularly don't recommend this solution if your message is very sensitive.&lt;/p&gt;
&lt;p&gt;If you are serious about ensuring your long-term privacy, the safest way to go is to use a text editor to write your email message, encrypting the message outside of the web browser, and then cutting and pasting into your webmail interface. This will guarantee that only the recipient will be able to read your email.&lt;/p&gt;
&lt;p&gt;If you really need something in your browser,  the creator of &lt;a href="https://crypto.cat/"&gt;Cryptocat&lt;/a&gt; recently released &lt;a href="https://minilock.io/"&gt;minilock&lt;/a&gt;. This tool  uses  &lt;a href="http://en.wikipedia.org/wiki/Curve25519"&gt;Curve25519 elliptic curve cryptography&lt;/a&gt; (the sames as in Cryptocat) so that the public keys are much shorter (and easier to share). Remember,  it's a new app, so it might not yet be the best choice for high-stakes environment (but  it's  worth keeping tabs on this project).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3</dc:creator><pubDate>Tue, 28 Oct 2014 05:20:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-28:quick-and-dirty-intro-to-openpgp-gpg.html</guid><category>PGP</category><category>GPG</category></item><item><title>The Peace Pipe at Hack.lu's Final CTF 2014</title><link>http://bt3gl.github.io/the-peace-pipe-at-hacklus-final-ctf-2014.html</link><description>&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/LXaaRsf.png" /&gt;&lt;/p&gt;
&lt;p&gt;Last week was the &lt;a href="https://wildwildweb.fluxfingers.net/scoreboard"&gt;Hack.lu&lt;/a&gt; Final CTF. In this post I  discuss  one of my favorite  crypto problems in that CTF: the "Peace Pipe".&lt;/p&gt;
&lt;h2&gt;Understanding the Problem&lt;/h2&gt;
&lt;p&gt;The problem starts with this weird story:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;sit&lt;/span&gt; &lt;span class="n"&gt;around&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;campfire&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;wild&lt;/span&gt; &lt;span class="n"&gt;wild&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;few&lt;/span&gt; &lt;span class="n"&gt;Sioux&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;met&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;celebrate&lt;/span&gt; &lt;span class="n"&gt;friendship&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;his&lt;/span&gt; &lt;span class="n"&gt;wooden&lt;/span&gt; &lt;span class="n"&gt;peace&lt;/span&gt; &lt;span class="n"&gt;pipe&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt; &lt;span class="n"&gt;later&lt;/span&gt; &lt;span class="n"&gt;everyone&lt;/span&gt; &lt;span class="n"&gt;seems&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;pretty&lt;/span&gt; &lt;span class="n"&gt;dizzy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;war&lt;/span&gt; &lt;span class="n"&gt;chief&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Makawee&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;say&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="n"&gt;tipi&lt;/span&gt; &lt;span class="n"&gt;filled&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;fire&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;water&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="n"&gt;But&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;he&lt;/span&gt; &lt;span class="n"&gt;noticed&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;interest&lt;/span&gt; &lt;span class="n"&gt;he&lt;/span&gt; &lt;span class="n"&gt;immediately&lt;/span&gt; &lt;span class="n"&gt;stopped&lt;/span&gt; &lt;span class="n"&gt;talking&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;recall&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Makawee&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;spoke&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Wahkoowah&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;issue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;ended&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;fight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Since&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;Makawee&lt;/span&gt; &lt;span class="n"&gt;wouldnt&lt;/span&gt; &lt;span class="n"&gt;talk&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Wahkoowah&lt;/span&gt; &lt;span class="n"&gt;anymore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;While&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;argued&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Chapawee&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;wrote&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Maybe&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;exploit&lt;/span&gt; &lt;span class="n"&gt;their&lt;/span&gt; &lt;span class="n"&gt;dizzyness&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;tipi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then it gives us three &lt;em&gt;ports&lt;/em&gt; in the &lt;em&gt;host&lt;/em&gt;. With the first one, we  talk to &lt;strong&gt;Chapawee&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wildwildweb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fluxfingers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="mi"&gt;1432&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the second, we talk to &lt;strong&gt;Wankoowah&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wildwildweb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fluxfingers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="mi"&gt;1433&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, with the third, we talk to &lt;strong&gt;Makawee&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wildwildweb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fluxfingers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="mi"&gt;1434&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It was obvious that  this game was about fooling our fellow &lt;em&gt;stoned&lt;/em&gt; native-Americans.&lt;/p&gt;
&lt;h3&gt;A Dialogue with Chapawee&lt;/h3&gt;
&lt;p&gt;When we &lt;em&gt;netcat&lt;/em&gt; to &lt;strong&gt;Chapawee&lt;/strong&gt; he answers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; nc wildwildweb.fluxfingers.net 1432
Hi I&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;m Chapawee. I know the truth about the stars
Say stars &lt;span class="k"&gt;for &lt;/span&gt;more
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We answer &lt;em&gt;stars&lt;/em&gt; and get a funny menu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        I can tell you the truth about
        * constellation
        * namestar &lt;span class="o"&gt;[&lt;/span&gt;starname&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;key_of_truth&lt;span class="o"&gt;]&lt;/span&gt;   Adds a public key to a user.
                                               Existing users cannot be
                                               overwritten. Input is
                                               &lt;span class="o"&gt;[&lt;/span&gt;a-f0-9&lt;span class="o"&gt;]{&lt;/span&gt;1,700&lt;span class="o"&gt;}&lt;/span&gt;.
        * showstar &lt;span class="o"&gt;[&lt;/span&gt;starname&lt;span class="o"&gt;]&lt;/span&gt;                  Reads the public key from the
                                               database.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first option &lt;em&gt;constellation&lt;/em&gt;, shows a very interesting scheme:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/OzVjrVh.png" /&gt;&lt;/p&gt;
&lt;p&gt;Choosing the options &lt;strong&gt;namestar&lt;/strong&gt; we are able to pick a (new) name to add a key. Picking the option &lt;strong&gt;showstar&lt;/strong&gt; we are able to see the key for some name (for example, for Wahkoowar, Makawee, or any new name we had added before).&lt;/p&gt;
&lt;p&gt;So, from the above scheme, we know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;How a &lt;strong&gt;message&lt;/strong&gt; (t) is created with someone's public key, a &lt;strong&gt;random rational number&lt;/strong&gt; (r_w), and a given &lt;strong&gt;modulus number&lt;/strong&gt; (p). The only unknown here is r_w, which is a rational number (Q). This mean that any plans to brute force the messages wouldn't work (however, if r_w was an integer, this task could be achieved).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everyone has a private key that is modulus p. We never learn anything about anyone's private keys. We just know that they could be of the order of p (which is a really large number, ~1E2048).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wahkoowah and Makawee have a shared secret key. The way they share this key without knowing each other's private key is by this tricky transformation:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/TwxShK9.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Notice that we can move the multiplications' modulus operation to the end, due to &lt;a href="http://en.wikipedia.org/wiki/Modular_arithmetic#Congruence_relation"&gt;this propriety&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In conclusion, all we need to do is to convince Wahkoowah  that we are Makawee (by telling him we are Makawee, so he can use his public key, and by sending him a correct &lt;em&gt;t_m&lt;/em&gt;). If this works, he will give us a token. Then, if we send this token to Makawee, we get our flag.&lt;/p&gt;
&lt;h3&gt;A Dialogue with Wankoowah&lt;/h3&gt;
&lt;p&gt;Now, let's see what Wankoowah has to say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc wildwildweb.fluxfingers.net 1433
Hi, I&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;m Wahkoowah. Who are you? Too foggy...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We try a couple of possibilities to check the outputs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc wildwildweb.fluxfingers.net 1433
Hi, I&lt;span class="s1"&gt;&amp;#39;m Wahkoowah. Who are you? Too foggy...&lt;/span&gt;
&lt;span class="s1"&gt;noone&lt;/span&gt;
&lt;span class="s1"&gt;Hi noone&lt;/span&gt;
&lt;span class="s1"&gt;Cannot find it...&lt;/span&gt;
&lt;span class="s1"&gt;Ncat: Broken pipe.&lt;/span&gt;

&lt;span class="s1"&gt;$ nc wildwildweb.fluxfingers.net 1433&lt;/span&gt;
&lt;span class="s1"&gt;Hi, I&amp;#39;&lt;/span&gt;m Wahkoowah. Who are you? Too foggy...
makawee
Oh its you, Im so sorry. Can we talk now?
This is your key of truth
50e7e1957c1786a9442f0c9f372ec19f74f52839e9e38849b47438153f9d2483213a43ad2d988fab4a8707922060aaefe6504a70637596fbcf9d58362b23e5d5e2177fd4e919b80437bab51eda931e065b6d66fce343d7cb2b7c1ca26214792d461895095ae58354af0dec6e63869007e23835892f26aabc96fe3d9084a829b4d6c5b92c6f3e0dd9a70cbd5c72d6434f2b94d21c3b0c58a288c140642b813ffb1b632bc358b3a6af0124902acd8792202c848de7f9d5d98bee51ca69040c8a2457ad3fa6276d6510701b9a875df612e035322cad06579a0a11f5e7cb4ebb7b69171c38585fc0f4fe07b0c889442397029d05dc801026a0648d7aa8c847420e9c
With magic I did this:
922a7f4b150eb83eab929e2a44bcbbb45435851262a6e7b84d2777d995ffbc315a2e57a580f4982797b45efde6d30b493880ecea33fe26e6c8ff636b75b7cb3f647f0c6f606249bc48ef09bd20738cf472bf47c7f52b9e11afcefc1548155637b0d2054d37cd74301e534208408074938ae4e7b54ef50fa0a39cb090dd34de7a4040024ba2394bac62262ccda529d2d69effe24338f0ec1b842539d2b89b081fa77a266a7c9f62c25d2a1ee1af3da8054d79d87ae88da61b8333e1fc195d2957341458700a3be70c98e1a8ab35bfe527ff6a2f255c66d753d03c59404993f1ed295a722bf1d0241eec9c01efe06e3cd5b845e84de3d29de17f9b68351bdc2d65
We &lt;span class="k"&gt;continue &lt;/span&gt;our conversation, right?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;magic&lt;/em&gt; is the message &lt;em&gt;t_w&lt;/em&gt;, created with Makawee's public key. Wahkoowah then ask for &lt;em&gt;t_m&lt;/em&gt;...&lt;/p&gt;
&lt;h3&gt;A Dialogue with Makawee&lt;/h3&gt;
&lt;p&gt;Let's see what Makawee has to say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc wildwildweb.fluxfingers.net 1434
Hi, I&lt;span class="s1"&gt;&amp;#39;m, Makawee, and you are? Too bright here...&lt;/span&gt;
&lt;span class="s1"&gt;noone&lt;/span&gt;
&lt;span class="s1"&gt;noone ... do I know you?&lt;/span&gt;
&lt;span class="s1"&gt;Cannot find it...&lt;/span&gt;

&lt;span class="s1"&gt;Ncat: Broken pipe.&lt;/span&gt;

&lt;span class="s1"&gt;$ nc wildwildweb.fluxfingers.net 1434&lt;/span&gt;
&lt;span class="s1"&gt;Hi, I&amp;#39;&lt;/span&gt;m, Makawee, and you are? Too bright here...
wahkoowah
I dont talk to you anymore. That thing with my daughter...

Ncat: Broken pipe.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mmmm, we need to make Makawee use Wankoowah's key without him knowing it!&lt;/p&gt;
&lt;p&gt;Since Chapawee allows us to add keys to names, let's create some name with Wahkoowah's key (say "mrwhite") and send this to Makawee:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc wildwildweb.fluxfingers.net 1432
Hi I&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;m Chapawee. I know the truth about the stars
Say stars &lt;span class="k"&gt;for &lt;/span&gt;more
stars

        I can tell you the truth about
        * stars
        * constellation
        * namestar &lt;span class="o"&gt;[&lt;/span&gt;starname&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;key_of_truth&lt;span class="o"&gt;]&lt;/span&gt;   Adds a public key to a user.
                                               Existing users cannot be
                                               overwritten. Input is
                                               &lt;span class="o"&gt;[&lt;/span&gt;a-f0-9&lt;span class="o"&gt;]{&lt;/span&gt;1,700&lt;span class="o"&gt;}&lt;/span&gt;.
        * showstar &lt;span class="o"&gt;[&lt;/span&gt;starname&lt;span class="o"&gt;]&lt;/span&gt;                  Reads the public key from the
                                               database.

namestar mrwhite 218b783ec5676cbddd378ceb724820444599f22cdcfda0a5a195b3a8fbf4ab5c915703420ad3b84531c54b838b23858fb84fcaf04d4932d4b9ef861c7ae9b635c9d3f56dfb100aa47297afcd94df41efa9f5ecba6483c5328e43ec457027ee4efcecefa094a83945106d7da1878c1f47516c2f2578170eeb36955d8bd16e0d106f9e2effe9debff41e551db4ac2e87bc8a9378d8eadb042bee18f4ad72ab721833a27154a7318b8cbe6f98fb3c82da32d1688fdcdb718fb15d9d5e6276b037cef62d953c09b23ebe90d0b13f61cd1643e5e1b0a433d5e2522ec5a028817891b6df444e983e1e0ff2356044fea67c616dce6b4bd53b17ea8bc51ef816ab8f2d9e
Add the star to the sky...
Set the star &lt;span class="k"&gt;for &lt;/span&gt;mrwhite: 218b783ec5676cbddd378ceb724820444599f22cdcfda0a5a195b3a8fbf4ab5c915703420ad3b84531c54b838b23858fb84fcaf04d4932d4b9ef861c7ae9b635c9d3f56dfb100aa47297afcd94df41efa9f5ecba6483c5328e43ec457027ee4efcecefa094a83945106d7da1878c1f47516c2f2578170eeb36955d8bd16e0d106f9e2effe9debff41e551db4ac2e87bc8a9378d8eadb042bee18f4ad72ab721833a27154a7318b8cbe6f98fb3c82da32d1688fdcdb718fb15d9d5e6276b037cef62d953c09b23ebe90d0b13f61cd1643e5e1b0a433d5e2522ec5a028817891b6df444e983e1e0ff2356044fea67c616dce6b4bd53b17ea8bc51ef816ab8f2d9e
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sending it to Makawee:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nc wildwildweb.fluxfingers.net 1434
Hi, I&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;m, Makawee, and you are? Too bright here...
mrwhite
mrwhite ... &lt;span class="k"&gt;do &lt;/span&gt;I know you?
Disguise does not &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh no, the plan did not work! We can't send &lt;strong&gt;exactly&lt;/strong&gt; Wahkoowah's key! We need to be even more tricky...&lt;/p&gt;
&lt;h2&gt;Crafting a Solution&lt;/h2&gt;
&lt;h3&gt;Master in Disguising&lt;/h3&gt;
&lt;p&gt;Every key in this problem is given by &lt;em&gt;mudulus p&lt;/em&gt;. This means that we have infinite values that map to the same original key. My first attempt was to multiply the original key by p, so that, when it receives the modulus operation, it circles once more returning to the original value.&lt;/p&gt;
&lt;p&gt;It didn't work. The reason is that p is too large. When multiplied by the key (that is large itself) we loose precision and we don't go back to the original value. We need to keep the values in the same scale!&lt;/p&gt;
&lt;p&gt;Let's take a look again at the way the messages are generated:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/Hz5uf7X.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;We notice that the public key is exponentiated by r_m. It means that, if r_m is an even number, two values of the public key are mapped to the same value of the final message: +pubk and -pubk.&lt;/p&gt;
&lt;p&gt;That's all we need! We are going to disguise Makawee by creating a &lt;em&gt;star&lt;/em&gt; with the negative value of Wahkoowah's key.&lt;/p&gt;
&lt;h3&gt;Automatizing the Process and getting the Flag!&lt;/h3&gt;
&lt;p&gt;All right, now we know how to make Wahkoowah and Makawee talk and how to get &lt;em&gt;t_m&lt;/em&gt; and &lt;em&gt;t_w&lt;/em&gt;. We are ready to generate the token that will lead us to the flag.&lt;/p&gt;
&lt;p&gt;Notice again that since these messages are generated with random numbers, they will differ each time. However, we know from above that they carry unique information that leads to a common key (and the flag). I wrote the following script to automatize the process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;PORTm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1434&lt;/span&gt;
&lt;span class="n"&gt;PORTw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1433&lt;/span&gt;
&lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;wildwildweb.fluxfingers.net&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;peace_pipe&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Get the magic message from some user to calculate rm &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# create sockets&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# connect to w&lt;/span&gt;
    &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORTw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;makawee&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;did this:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Magic from w to m: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tw&lt;/span&gt;

    &lt;span class="c"&gt;# connect to m&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORTm&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mrblack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;did this:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;Magic from m to w: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tm&lt;/span&gt;

    &lt;span class="c"&gt;# send w&amp;#39;s magic to m&amp;#39;s&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# send m&amp;#39;s magic to get the token&lt;/span&gt;
    &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Token is: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;

    &lt;span class="c"&gt;# finally, send token back to m&lt;/span&gt;
    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;peace_pipe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running it leads us to the flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python 300_peace_pipe.py

Magic from w to m: 2f2f5d280871947836e9b5665986c1b75e732d88ae3d464b65d24ea7e41c33c491060379ac4f3dc4a7231f43d6a11b5bfd3a780d8ac46bd1a4cfd99ac041434cb82c5941f17e68a4f180101ece166a1b4da6ea32d62455bd7472892ed9b67fe2122e0b331048e4a11d98422f04ec3063a3652a0e1a90e13a740905bb3a22c9b5e39d1e0fa97f10bff34d76243b9211afd1131b0f6e33d4d99c8069c462677ce67401214c943fee13252060aa02b8b1525ed0af8c9aa5ad5dee64dbb0c275dd6147754c7dfaf3218caf35d7837925215a04bb315e91441306ef0d29f0da733b7e4ac92b500dc522de11c5f5af58248ed5f762b854f40f0adf4b681a937d17a1c0

Magic from m to w: e9eedf64931d5f77f5d061a0f411f9d385144f33fe1419905fdb24a0537cc205a7f99e083f37f98af8553795f1a71f83b7924620790845c3a48bb71a9b70a0f9e5ab95dda40ec4e229bc6a6cd146779de74b7237e42d01e2538c093407165afc79776bbd9bcdefa1d9af27a39f17610b4b9060c2b0ca5203457061facdc68257433253366937cef469261492ac81c177f42f10beea386ddfa09069a5fa2ae2e39a41eeecebdba622b79231cd5f206d0a70c71aa3eb5f706a16c99173f79f97e7f3408b544df556e3779f6d49441c04d33438b9604392f90bca6c2a8c3181b12ec5d492ef2184b9db69fdd1b6247150e3b55f8ee65d113c5350b4b097abadddc9
Bit more truth is missing

Token is: 5QAWhcwSaQicM8LitDGz6To69sBtsO8ASL27zxql8hW8aziveW0B0epJz2PKIFo/K4A&lt;span class="o"&gt;=&lt;/span&gt;
I knew you are able to see IT. Lets get drunk, I tell you where
flag&lt;span class="o"&gt;{&lt;/span&gt;FreeBoozeForEverone-Party!&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;That's it! Hack all the things!&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">bt3</dc:creator><pubDate>Thu, 23 Oct 2014 06:30:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-23:the-peace-pipe-at-hacklus-final-ctf-2014.html</guid><category>SSH</category></item></channel></rss>